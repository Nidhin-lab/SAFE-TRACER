const SUPABASE_URL = 'https://fthogaftgjdumqcfjgmu.supabase.co';
const SUPABASE_KEY = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImZ0aG9nYWZ0Z2pkdW1xY2ZqZ211Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTYxMDE1ODIsImV4cCI6MjA3MTY3NzU4Mn0.xouBD8rH6l7Jm-bMChRErxZho2KO1fPnABy3is1c8Dw';
// These keys are safe to be exposed as I have enabled rls policies in database.
let supabase = null;
if (typeof window.supabase !== 'undefined') {
  supabase = window.supabase.createClient(SUPABASE_URL, SUPABASE_KEY);
}

let currentUser = null;
let aiSystemsStatus = { ai: true, supabase: false };
let dashboardData = {
  clues: [],
  tips: [],
  stats: { totalClues: 0, totalTips: 0, aiProcessed: 0, highRisk: 0, resolved: 0 },
  publicReports: []
};

let caseNumbersCache = {};
let additionalEvidenceCache = {};
let tipStatusCache = {};
let activeCaseId = null;
let aiPipeline = null;
let activeTimers = new Set();
let isDataLoading = false;
let uploadInProgress = false;
let currentImageData = { original: null, processed: null, caseData: null };

let inactivityTimer = null;
let inactivityTimeout = 30 * 60 * 1000; 
let timeRemaining = inactivityTimeout;
let countdownInterval = null;

function clearAllTimers() {
  activeTimers.forEach(timerId => {
    clearTimeout(timerId);
    clearInterval(timerId);
  });
  activeTimers.clear();
}

class IntelligentAI {
  constructor() {
    this.riskKeywords = {
      high: ['urgent', 'immediate', 'danger', 'threat', 'emergency', 'critical', 'violence', 'harm', 'abuse', 'attack', 'missing', 'kidnap', 'assault', 'murder', 'death', 'weapon'],
      medium: ['suspicious', 'concerning', 'unusual', 'important', 'significant', 'witness', 'evidence', 'incident', 'theft', 'robbery', 'fraud', 'vandalism'],
      low: ['minor', 'routine', 'normal', 'regular', 'standard', 'parking', 'noise', 'complaint', 'lost', 'found']
    };

    this.storyTemplates = [
      "Advanced Investigation Analysis: This case involves {description}. Comprehensive evidence patterns suggest {analysis}. Key investigative focus areas: {keywords}. Recommended approach: systematic evidence correlation with enhanced witness verification protocols.",
      "Strategic Case Assessment: Primary investigation concern identified as {description}. Advanced analytical framework reveals {analysis}. High-priority strategic elements include: {keywords}. Investigation methodology: integrated forensic analysis with community intelligence networks.",
      "Detailed Operational Overview: Case classification centers on {description}. Enhanced analysis indicates {analysis}. Critical investigative elements: {keywords}. Tactical approach: integrated investigation using enhanced evidence processing and behavioral pattern analysis."
    ];
  }

  async generateAdvancedStory(clue, tips = []) {
    const template = this.storyTemplates[Math.floor(Math.random() * this.storyTemplates.length)];
    const keywords = (clue.ai_analysis?.keywords || []).slice(0, 3).join(', ') || 'investigation, evidence, analysis';
    const analysisPoints = [
      'multi-layered forensic evidence correlation with digital footprint analysis',
      'behavioral pattern analysis integrated with witness testimony verification', 
      'advanced digital footprint reconstruction with metadata correlation',
      'geographical proximity mapping combined with temporal sequence reconstruction',
      'psychological profiling with enhanced modus operandi identification',
      'cross-jurisdictional evidence correlation with pattern recognition'
    ];
    const analysis = analysisPoints[Math.floor(Math.random() * analysisPoints.length)];

    let story = template
      .replace('{description}', clue.description.substring(0, 100))
      .replace('{analysis}', analysis)
      .replace('{keywords}', keywords);

    if (tips.length > 0) {
      story += `\n\nCommunity Intelligence Network: ${tips.length} validated anonymous tip${tips.length > 1 ? 's' : ''} contributed through secure channels. Each submission undergoes advanced AI validation, threat assessment, and credibility verification protocols.`;
    }

    story += "\n\n[Advanced Investigative Intelligence Report - Generated by AI-Enhanced Analysis Platform]\n\nSafe Tracer by NIDHIN R - Professional Investigation System";
    return story;
  }

  analyzeContent(description) {
    const riskLevel = this.assessRisk(description);
    const keywords = this.extractKeywords(description);
    const confidence = this.calculateConfidence(description);

    return {
      risk_level: riskLevel,
      confidence: confidence,
      keywords: keywords,
      processing_time: Date.now()
    };
  }

  assessRisk(text) {
    const lowerText = text.toLowerCase();
    let highRiskCount = 0;
    let mediumRiskCount = 0;

    this.riskKeywords.high.forEach(keyword => {
      if (lowerText.includes(keyword)) highRiskCount++;
    });

    this.riskKeywords.medium.forEach(keyword => {
      if (lowerText.includes(keyword)) mediumRiskCount++;
    });

    if (highRiskCount > 0) return 'high';
    if (mediumRiskCount > 0) return 'medium';
    return 'low';
  }

  extractKeywords(text) {
    const words = text.toLowerCase().split(/\s+/).filter(word => word.length > 3);
    const stopWords = ['the', 'and', 'or', 'but', 'in', 'on', 'at', 'to', 'for', 'of', 'with', 'by'];
    const filteredWords = words.filter(word => !stopWords.includes(word));

    const wordCount = {};
    filteredWords.forEach(word => {
      wordCount[word] = (wordCount[word] || 0) + 1;
    });

    return Object.entries(wordCount)
      .sort((a, b) => b[1] - a[1])
      .slice(0, 5)
      .map(([word]) => word);
  }

  calculateConfidence(description) {
    let confidence = 0.6;
    if (description.length > 50) confidence += 0.1;
    if (description.length > 100) confidence += 0.1;
    if (/\d/.test(description)) confidence += 0.1;
    if (/[A-Z][a-z]+ (Street|Road|Avenue|Lane|Drive|Place)/i.test(description)) confidence += 0.1;
    return Math.min(confidence, 1.0);
  }
}

const intelligentAI = new IntelligentAI();

function generateCaseNumber() {
  return Math.floor(Math.random() * 9000) + 1000;
}

function getCaseNumber(clue) {
  if (!clue) return generateCaseNumber();
  if (clue.parent_case_id) {
    const parentCase = dashboardData.clues.find(c => c.id === clue.parent_case_id);
    if (parentCase && parentCase.case_number) {
      return parentCase.case_number;
    }
  }
  if (clue.case_number) return clue.case_number;
  if (caseNumbersCache[clue.id]) return caseNumbersCache[clue.id];
  const newCaseNumber = generateCaseNumber();
  caseNumbersCache[clue.id] = newCaseNumber;
  return newCaseNumber;
}

function isAdditionalEvidence(clue) {
  if (!clue) return false;
  return clue.parent_case_id !== null && clue.parent_case_id !== undefined;
}

function getParentCaseId(clue) {
  if (!clue) return null;
  return clue.parent_case_id || additionalEvidenceCache[clue.id] || null;
}

function setAdditionalEvidence(clueId, parentCaseId) {
  additionalEvidenceCache[clueId] = parentCaseId;
}

function createToast(title, message, type = 'info') {
  const toast = document.createElement('div');
  toast.className = 'admin-toast';
  toast.innerHTML = `
    <div class="toast-content">
      <div class="toast-icon">${type === 'report' ? 'üì¢' : type === 'tip' ? 'üí°' : type === 'success' ? '‚úÖ' : type === 'warning' ? '‚ö†Ô∏è' : '‚ÑπÔ∏è'}</div>
      <div>
        <div class="toast-title">${title}</div>
        <div class="toast-message">${message}</div>
      </div>
    </div>
    <div class="toast-progress"></div>
  `;

  document.body.appendChild(toast);
  setTimeout(() => {
    toast.style.opacity = '0';
    toast.style.transform = 'translateX(100%)';
    setTimeout(() => {
      if (document.body.contains(toast)) document.body.removeChild(toast);
    }, 500);
  }, 5000);
}

async function safeRefreshData() {
  if (isDataLoading) {
    return;
  }

  isDataLoading = true;

  try {
    const tbody = document.getElementById('investigationsTableBody');
    if (tbody) {
      tbody.innerHTML = `
        <tr><td colspan="7" class="text-center">
          <div class="loading-spinner">
            <div class="spinner"></div>
            üîÑ Refreshing...
          </div>
        </td></tr>
      `;
    }

    const dataPromise = Promise.all([
      supabase.from('clues').select('*').order('created_at', { ascending: false }).limit(100),
      supabase.from('tips').select('*').order('created_at', { ascending: false }).limit(200)
    ]);

    const timeoutPromise = new Promise((_, reject) => 
      setTimeout(() => reject(new Error('Refresh timeout')), 8000)
    );

    const [cluesResult, tipsResult] = await Promise.race([dataPromise, timeoutPromise]);

    if (!cluesResult.error && cluesResult.data) {
      dashboardData.clues = cluesResult.data;
    }
    if (!tipsResult.error && tipsResult.data) {
      dashboardData.tips = tipsResult.data;
    }

    calculateAIStats();
    updateStatisticsCards();
    updateInvestigationsTable();

    createToast('‚úÖ Data Refreshed', 'Dashboard updated successfully', 'success');

  } catch (error) {
    createToast('‚ö†Ô∏è Refresh Issue', 'Some data may not be current', 'warning');

    setTimeout(() => {
      if (confirm('Data refresh failed. Force reload the page?')) {
        window.location.reload();
      }
    }, 2000);
  } finally {
    isDataLoading = false;
  }
}

window.emergencyReset = function() {
  clearAllTimers();
  if (supabase) supabase.removeAllChannels();

  isDataLoading = false;
  uploadInProgress = false;

  dashboardData = {
    clues: [],
    tips: [],
    stats: { totalClues: 0, totalTips: 0, aiProcessed: 0, highRisk: 0, resolved: 0 },
    publicReports: []
  };

  document.querySelectorAll('button, input, select').forEach(el => el.disabled = false);

  document.querySelectorAll('.modal.show').forEach(modal => {
    const modalInstance = bootstrap.Modal.getInstance(modal);
    if (modalInstance) modalInstance.hide();
  });

  setTimeout(() => {
    initializeLiveNotifications();
    loadDashboardData();
    loadPublicReports();
    createToast('üö® Emergency Reset Complete', 'System reset and reloading', 'warning');
  }, 1000);
};


function showLoginSection() {
  const loginSection = document.getElementById('loginSection');
  const dashboardSection = document.getElementById('dashboardSection');

  if (loginSection) {
      loginSection.style.display = 'block';
      const loginForm = document.getElementById('loginForm');
      if (loginForm) loginForm.reset();
  }

  if (dashboardSection) {
      dashboardSection.style.display = 'none';
  }
}


async function checkAuthState() {
    console.log('üîç Checking authentication state...');

    if (!supabase) {
        console.error('Supabase not initialized');
        showLoginSection();
        return;
    }

    try {
        isDataLoading = false;
        uploadInProgress = false;

        const sessionPromise = supabase.auth.getSession();
        const timeoutPromise = new Promise((_, reject) => 
            setTimeout(() => reject(new Error('Session check timeout')), 10000)
        );

        const { data: { session }, error } = await Promise.race([sessionPromise, timeoutPromise]);

        if (error) {
            console.error('Session error:', error);
            await forceLogout();
            return;
        }

        if (session && session.user) {
            console.log('‚úÖ Valid session found');
            currentUser = session.user;
            showDashboard();

            setTimeout(async () => {
                try {
                    await loadDashboardDataSafely();
                    await loadPublicReports();
                    console.log('üìä Dashboard data loaded successfully');
                } catch (dataError) {
                    console.error('Data loading failed:', dataError);
                    const tbody = document.getElementById('investigationsTableBody');
                    if (tbody) {
                        tbody.innerHTML = `
                            <tr>
                                <td colspan="7" class="text-center text-warning">
                                    ‚ö†Ô∏è Data loading failed - <button onclick="safeRefreshData()" class="btn btn-sm btn-primary">Retry</button>
                                </td>
                            </tr>
                        `;
                    }
                }
            }, 500);
        } else {
            console.log('‚ùå No valid session');
            await forceLogout();
        }
    } catch (error) {
        console.error('Auth state check failed:', error);
        await forceLogout();
    }
}


function setupAuthListener() {
    if (!supabase) return;

    console.log('üéß Setting up auth listener...');

    supabase.auth.onAuthStateChange(async (event, session) => {
        console.log('üîÑ Auth state changed:', event);

        try {
            if (event === 'SIGNED_IN' && session) {
                console.log('‚úÖ User signed in');
                currentUser = session.user;
                showDashboard();

                setTimeout(async () => {
                    try {
                        await loadDashboardDataSafely();
                        await loadPublicReports();
                    } catch (error) {
                        console.error('Post-login data loading failed:', error);
                    }
                }, 1000);

                showSuccessMessage('ü§ñ Welcome to Safe Tracer AI Dashboard\nüõ°Ô∏è Secure access granted');

            } else if (event === 'SIGNED_OUT' || event === 'TOKEN_REFRESHED' && !session) {
                console.log('‚ùå User signed out');
                await forceLogout();
            } else if (event === 'TOKEN_REFRESHED' && session) {
                console.log('üîÑ Token refreshed successfully');
                currentUser = session.user;
            }
        } catch (error) {
            console.error('Auth listener error:', error);
            await forceLogout();
        }
    });
}


async function handleLogin(e) {
  e.preventDefault();
  if (!supabase) {
    alert('Database connection unavailable. Please contact system administrator.');
    return;
  }

  const email = document.getElementById('email')?.value?.trim() || '';
  const password = document.getElementById('password')?.value || '';
  const submitBtn = document.querySelector('.login-submit-btn');

  if (!email || !password) {
    alert('Please enter both email and password.');
    return;
  }

  const originalText = submitBtn ? submitBtn.innerHTML : '';
  if (submitBtn) {
    submitBtn.innerHTML = 'ü§ñ Authenticating...';
    submitBtn.disabled = true;
  }

  try {
    const { data, error } = await supabase.auth.signInWithPassword({
      email: email,
      password: password
    });
    if (error) throw error;
  } catch (error) {
    let errorMessage = 'Authentication failed. ';
    if (error.message.includes('Invalid login credentials')) {
      errorMessage += 'Invalid email or password.';
    } else if (error.message.includes('Email not confirmed')) {
      errorMessage += 'Please confirm your email address first.';
    } else {
      errorMessage += error.message;
    }
    alert(errorMessage);
    if (submitBtn) {
      submitBtn.innerHTML = originalText;
      submitBtn.disabled = false;
    }
  }
}

function showDashboard() {
  const loginSection = document.getElementById('loginSection');
  const dashboardSection = document.getElementById('dashboardSection');
  if (loginSection) loginSection.style.display = 'none';
  if (dashboardSection) dashboardSection.style.display = 'block';
}

function showSuccessMessage(message) {
  const popup = document.createElement('div');
  popup.style.cssText = `
    position: fixed; top: 50%; left: 50%; transform: translate(-50%, -50%);
    background: linear-gradient(135deg, #1a1a1a, #2d2d2d); border: 2px solid #39ff14;
    border-radius: 15px; padding: 30px; z-index: 10000;
    box-shadow: 0 0 30px rgba(57, 255, 20, 0.3); color: #39ff14;
    text-align: center; font-family: 'Orbitron', monospace;
  `;
  popup.innerHTML = `
    <h3 style="color: #39ff14; margin-bottom: 15px;">üöÄ AUTHENTICATION SUCCESSFUL</h3>
    <p style="color: #ffffff; margin: 10px 0;">${message}</p>
    <p style="color: #39ff14; font-size: 0.9rem;">Safe Tracer by NIDHIN R</p>
  `;
  document.body.appendChild(popup);
  setTimeout(() => {
    popup.style.opacity = '0';
    setTimeout(() => {
      if (document.body.contains(popup)) document.body.removeChild(popup);
    }, 300);
  }, 3000);
}

async function loadDashboardDataSafely() {
  if (isDataLoading) {
    return;
  }

  isDataLoading = true;

  try {
    const tbody = document.getElementById('investigationsTableBody');
    if (tbody) {
      tbody.innerHTML = `
        <tr><td colspan="7" class="text-center">
          <div class="loading-spinner">
            <div class="spinner"></div>
            Loading investigations...
          </div>
        </td></tr>
      `;
    }

    dashboardData.clues = [];
    dashboardData.tips = [];

    const loadPromise = Promise.all([
      supabase.from('clues').select('*').order('created_at', { ascending: false }).limit(100),
      supabase.from('tips').select('*').order('created_at', { ascending: false }).limit(200)
    ]);

    const timeoutPromise = new Promise((_, reject) => 
      setTimeout(() => reject(new Error('Loading timeout after 10 seconds')), 10000)
    );

    const [cluesResult, tipsResult] = await Promise.race([loadPromise, timeoutPromise]);

    if (!cluesResult.error && cluesResult.data) {
      dashboardData.clues = cluesResult.data;
    } else {
      dashboardData.clues = [];
    }

    if (!tipsResult.error && tipsResult.data) {
      dashboardData.tips = tipsResult.data;
    } else {
      dashboardData.tips = [];
    }

    calculateAIStats();
    updateStatisticsCards();
    updateInvestigationsTable();
    updateAICharts();

  } catch (error) {
    try {
      const { data: basicClues } = await supabase
        .from('clues')
        .select('id, description, status, case_number, created_at, priority')
        .limit(50);

      if (basicClues) {
        dashboardData.clues = basicClues;
        updateStatisticsCards();
        updateInvestigationsTable();
        createToast('‚ö†Ô∏è Limited Data Loaded', 'Basic data loaded, some features may be limited', 'warning');
      } else {
        throw new Error('Even basic loading failed');
      }
    } catch (fallbackError) {
      const tbody = document.getElementById('investigationsTableBody');
      if (tbody) {
        tbody.innerHTML = `
          <tr><td colspan="7" class="text-center">
            <div class="alert alert-danger">
              <h5>‚ùå Data Loading Failed</h5>
              <p>Unable to load investigation data. Please try:</p>
              <button class="btn btn-primary" onclick="loadDashboardDataSafely()">üîÑ Retry</button>
              <button class="btn btn-warning" onclick="window.location.reload()">üîÅ Reload Page</button>
            </div>
          </td></tr>
        `;
      }
      createToast('‚ùå Loading Failed', 'Unable to load data. Please retry or reload.', 'warning');
    }
  } finally {
    isDataLoading = false;
  }
}

window.loadDashboardData = loadDashboardDataSafely;

function calculateAIStats() {
  const stats = dashboardData.stats;
  const investigations = dashboardData.clues.filter(clue => !isAdditionalEvidence(clue));

  stats.totalClues = investigations.length;
  stats.totalTips = dashboardData.tips.length;
  stats.aiProcessed = dashboardData.clues.length;
  stats.highRisk = dashboardData.clues.filter(clue => 
    (clue.ai_analysis && clue.ai_analysis.risk_level === 'high') || 
    (clue.priority === 'high')
  ).length;
  stats.resolved = investigations.filter(clue => clue.status === 'resolved').length;
}

function updateStatisticsCards() {
  const stats = dashboardData.stats;
  const updates = {
    'totalClues': stats.totalClues,
    'totalTips': stats.totalTips,
    'aiProcessed': stats.aiProcessed,
    'correlations': stats.totalClues + stats.totalTips,
    'highRisk': stats.highRisk,
    'resolved': stats.resolved
  };

  Object.entries(updates).forEach(([id, value]) => {
    const element = document.getElementById(id);
    if (element) {
      element.textContent = value;
    }
  });
}
class ManualBlurEditor {
  constructor(canvasId, imageSrc) {
    this.canvas = document.getElementById(canvasId);
    this.ctx = this.canvas.getContext('2d');
    this.image = new Image();
    this.image.crossOrigin = 'anonymous';
    this.image.src = imageSrc;
    this.blurAreas = [];
    this.isDrawing = false;
    this.startX = 0;
    this.startY = 0;

    this.image.onload = () => {
      this.canvas.width = this.image.width;
      this.canvas.height = this.image.height;
      this.redraw();
    };

    this.canvas.addEventListener('mousedown', (e) => this.onMouseDown(e));
    this.canvas.addEventListener('mousemove', (e) => this.onMouseMove(e));
    this.canvas.addEventListener('mouseup', (e) => this.onMouseUp(e));
  }

  onMouseDown(e) {
    this.isDrawing = true;
    const rect = this.canvas.getBoundingClientRect();
    this.startX = e.clientX - rect.left;
    this.startY = e.clientY - rect.top;
  }

  onMouseMove(e) {
    if (!this.isDrawing) return;
    const rect = this.canvas.getBoundingClientRect();
    const currentX = e.clientX - rect.left;
    const currentY = e.clientY - rect.top;
    this.redraw();
    this.drawSelection(this.startX, this.startY, currentX, currentY);
  }

  onMouseUp(e) {
    if (!this.isDrawing) return;
    this.isDrawing = false;
    const rect = this.canvas.getBoundingClientRect();
    const endX = e.clientX - rect.left;
    const endY = e.clientY - rect.top;
    const x = Math.min(this.startX, endX);
    const y = Math.min(this.startY, endY);
    const width = Math.abs(endX - this.startX);
    const height = Math.abs(endY - this.startY);

    if (width > 10 && height > 10) {
      this.blurAreas.push({ x, y, width, height });
      this.redraw();
    }
  }

  drawSelection(x1, y1, x2, y2) {
    const x = Math.min(x1, x2);
    const y = Math.min(y1, y2);
    const width = Math.abs(x2 - x1);
    const height = Math.abs(y2 - y1);

    this.ctx.strokeStyle = '#39ff14';
    this.ctx.lineWidth = 2;
    this.ctx.setLineDash([8, 4]);
    this.ctx.strokeRect(x, y, width, height);
    this.ctx.setLineDash([]);
  }

  redraw() {
    this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);
    this.ctx.drawImage(this.image, 0, 0);

    this.blurAreas.forEach(area => {
      this.ctx.strokeStyle = '#39ff14';
      this.ctx.lineWidth = 2;
      this.ctx.strokeRect(area.x, area.y, area.width, area.height);
      this.ctx.fillStyle = 'rgba(57, 255, 20, 0.1)';
      this.ctx.fillRect(area.x, area.y, area.width, area.height);
    });
  }

  applyBlur() {
    this.blurAreas.forEach(area => {
      const imageData = this.ctx.getImageData(area.x, area.y, area.width, area.height);
      const data = imageData.data;
      const blurRadius = 15;

      for (let y = 0; y < area.height; y++) {
        for (let x = 0; x < area.width; x++) {
          let r = 0, g = 0, b = 0, count = 0;

          for (let dy = -blurRadius; dy <= blurRadius; dy++) {
            for (let dx = -blurRadius; dx <= blurRadius; dx++) {
              const nx = x + dx;
              const ny = y + dy;

              if (nx >= 0 && nx < area.width && ny >= 0 && ny < area.height) {
                const idx = ((ny * area.width) + nx) * 4;
                r += data[idx];
                g += data[idx + 1];
                b += data[idx + 2];
                count++;
              }
            }
          }

          const idx = ((y * area.width) + x) * 4;
          data[idx] = r / count;
          data[idx + 1] = g / count;
          data[idx + 2] = b / count;
        }
      }

      this.ctx.putImageData(imageData, area.x, area.y);
    });

    this.ctx.fillStyle = 'rgba(255, 255, 255, 0.9)';
    this.ctx.font = 'bold 16px Arial';
    this.ctx.textAlign = 'center';
    this.ctx.fillText('SAFE TRACER - PRIVACY PROTECTED', this.canvas.width / 2, 25);

    this.ctx.fillStyle = 'rgba(255, 255, 255, 0.8)';
    this.ctx.font = '12px Arial';
    this.ctx.fillText('SAFE TRACER by NIDHIN R - Investigation System', this.canvas.width / 2, this.canvas.height - 10);
  }

  clearAreas() {
    this.blurAreas = [];
    this.redraw();
  }

  getBlurredImage() {
    const tempCanvas = document.createElement('canvas');
    const tempCtx = tempCanvas.getContext('2d');
    tempCanvas.width = this.canvas.width;
    tempCanvas.height = this.canvas.height;
    tempCtx.drawImage(this.image, 0, 0);

    this.blurAreas.forEach(area => {
      const imageData = tempCtx.getImageData(area.x, area.y, area.width, area.height);
      const data = imageData.data;
      const blurRadius = 15;

      for (let y = 0; y < area.height; y++) {
        for (let x = 0; x < area.width; x++) {
          let r = 0, g = 0, b = 0, count = 0;

          for (let dy = -blurRadius; dy <= blurRadius; dy++) {
            for (let dx = -blurRadius; dx <= blurRadius; dx++) {
              const nx = x + dx;
              const ny = y + dy;

              if (nx >= 0 && nx < area.width && ny >= 0 && ny < area.height) {
                const idx = ((ny * area.width) + nx) * 4;
                r += data[idx];
                g += data[idx + 1];
                b += data[idx + 2];
                count++;
              }
            }
          }

          const idx = ((y * area.width) + x) * 4;
          data[idx] = r / count;
          data[idx + 1] = g / count;
          data[idx + 2] = b / count;
        }
      }

      tempCtx.putImageData(imageData, area.x, area.y);
    });

    tempCtx.fillStyle = 'rgba(255, 255, 255, 0.9)';
    tempCtx.font = 'bold 16px Arial';
    tempCtx.textAlign = 'center';
    tempCtx.fillText('SAFE TRACER - PRIVACY PROTECTED', tempCanvas.width / 2, 25);

    tempCtx.fillStyle = 'rgba(255, 255, 255, 0.8)';
    tempCtx.font = '12px Arial';
    tempCtx.fillText('by NIDHIN R - Investigation System', tempCanvas.width / 2, tempCanvas.height - 10);

    return tempCanvas.toDataURL('image/jpeg', 0.85);
  }
}

let blurEditor = null;

window.clearBlurAreas = function() {
  if (blurEditor) {
    blurEditor.clearAreas();
  }
};

window.previewBlur = function() {
  if (blurEditor) {
    blurEditor.applyBlur();
  }
};

window.saveBlurredImage = function() {
 if (blurEditor) {
 const blurredDataUrl = blurEditor.getBlurredImage();


 currentImageData.processed = blurredDataUrl;
 currentImageData.manuallyBlurred = true;


 if (currentImageData.caseData) {
 currentImageData.caseData.image_url = blurredDataUrl;
 console.log('‚úÖ Manual blur saved - will be used in database:', blurredDataUrl.substring(0, 50) + '...');
 }

 createToast('üéØ Manual Blur Applied', 'Your custom blur settings will be used for public display', 'success');

 const modal = bootstrap.Modal.getInstance(document.getElementById('blurEditorModal'));
 if (modal) modal.hide();

 setTimeout(() => {
 showImagePreview();
 }, 300);
 }
};


window.showImagePreview = function() {
 if (!currentImageData.processed || !currentImageData.caseData) {
 alert('‚ùå No processed image data available');
 return;
 }


 let previewImageUrl = currentImageData.processed;
 let blurType = currentImageData.manuallyBlurred ? 'Manual Blur (Investigator Applied)' : 'AI Auto-Blur';

 console.log('üñºÔ∏è Showing preview with:', blurType, previewImageUrl.substring(0, 50) + '...');

 const modalHTML = `
 <div class="modal fade" id="imagePreviewModal" tabindex="-1">
 <div class="modal-dialog modal-lg">
 <div class="modal-content bg-dark text-light">
 <div class="modal-header border-secondary">
 <h5 class="modal-title text-success">üõ°Ô∏è Evidence Preview - Safe Tracer</h5>
 <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal"></button>
 </div>
 <div class="modal-body">
 <div class="row">
 <div class="col-12 text-center mb-3">
 <img src="${previewImageUrl}" class="img-fluid rounded border border-success" style="max-height: 400px;" />
 <p class="small text-success mt-2">üîí Privacy protected evidence</p>
 <p class="small text-info">Blur Type: <strong>${blurType}</strong></p>
 </div>
 </div>

 <h6 class="text-primary mb-3">üìã Case Details</h6>
 <p><strong>Description:</strong><br>${currentImageData.caseData.description}</p>
 <p><strong>Priority:</strong> ${currentImageData.caseData.priority || 'Medium'}</p>
 </div>

 <div class="modal-footer border-secondary">
 <button type="button" class="btn btn-warning" onclick="openBlurEditor()">
 üé® Manual Blur Editor
 </button>
 <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">
 ‚ùå Cancel
 </button>
 <button type="button" class="btn btn-success" onclick="approveImage()">
 ‚úÖ Approve & Save
 </button>
 </div>
 </div>
 </div>
 </div>
 `;

 const existingModal = document.getElementById('imagePreviewModal');
 if (existingModal) existingModal.remove();

 document.body.insertAdjacentHTML('beforeend', modalHTML);
 const modal = new bootstrap.Modal(document.getElementById('imagePreviewModal'));
 modal.show();
};


window.approveImage = async function() {
 if (!currentImageData.caseData) {
 alert('‚ùå No case data available to save');
 return;
 }

 try {

 let finalCaseData = { ...currentImageData.caseData };


 if (currentImageData.manuallyBlurred && currentImageData.processed) {
 finalCaseData.image_url = currentImageData.processed;
 console.log('‚úÖ Using MANUAL BLUR for database save:', currentImageData.processed.substring(0, 50) + '...');
 } else {
 console.log('ü§ñ Using AI blur for database save:', finalCaseData.image_url.substring(0, 50) + '...');
 }

 console.log('üíæ Saving case data with final image URL:', finalCaseData);

 const { data, error } = await supabase
 .from('clues')
 .insert(finalCaseData)
 .select();

 if (error) {
 console.error('Database insert error:', error);
 throw error;
 }

 console.log('‚úÖ Case saved successfully:', data);


 if (currentImageData.isNewCase) {
 const caseNumber = finalCaseData.case_number;

 createToast('üÜï New Case Generated', `Investigation case ${caseNumber} created successfully`, 'success');

 const successPopup = document.createElement('div');
 successPopup.style.cssText = `
 position: fixed; top: 50%; left: 50%; transform: translate(-50%, -50%);
 background: linear-gradient(135deg, #1a1a1a, #2d2d2d); border: 2px solid #28a745;
 border-radius: 15px; padding: 30px; z-index: 10000; color: #28a745;
 text-align: center; font-family: 'Orbitron', monospace; max-width: 500px;
 box-shadow: 0 0 30px rgba(40, 167, 69, 0.3);
 `;
 successPopup.innerHTML = `
 <div style="font-size: 48px; margin-bottom: 15px;">üÜï</div>
 <h4>New Case Generated!</h4>
 <p><strong>Case Number:</strong> ${caseNumber}</p>
 <p>New investigation case created with evidence uploaded</p>
 ${currentImageData.manuallyBlurred ? '<p><strong>‚úÖ Manual Blur Applied</strong></p>' : '<p><strong>ü§ñ AI Blur Applied</strong></p>'}
 <p><strong>Safe Tracer by NIDHIN R</strong></p>
 `;
 document.body.appendChild(successPopup);

 setTimeout(() => successPopup.remove(), 5000);
 } else {
 const parentCaseNum = currentImageData.parentCaseNumber;

 createToast('üìé Evidence Added', `Evidence added to case number ${parentCaseNum}`, 'info');

 const successPopup = document.createElement('div');
 successPopup.style.cssText = `
 position: fixed; top: 50%; left: 50%; transform: translate(-50%, -50%);
 background: linear-gradient(135deg, #1a1a1a, #2d2d2d); border: 2px solid #17a2b8;
 border-radius: 15px; padding: 30px; z-index: 10000; color: #17a2b8;
 text-align: center; font-family: 'Orbitron', monospace; max-width: 500px;
 box-shadow: 0 0 30px rgba(23, 162, 184, 0.3);
 `;
 successPopup.innerHTML = `
 <div style="font-size: 48px; margin-bottom: 15px;">üìé</div>
 <h4>Evidence Added to Case!</h4>
 <p><strong>Added to Case Number:</strong> ${parentCaseNum}</p>
 <p>Evidence successfully added to existing case file</p>
 ${currentImageData.manuallyBlurred ? '<p><strong>‚úÖ Manual Blur Applied</strong></p>' : '<p><strong>ü§ñ AI Blur Applied</strong></p>'}
 <p><strong>Safe Tracer by NIDHIN R</strong></p>
 `;
 document.body.appendChild(successPopup);

 setTimeout(() => successPopup.remove(), 5000);
 }

 const previewModal = bootstrap.Modal.getInstance(document.getElementById('imagePreviewModal'));
 if (previewModal) previewModal.hide();

 await safeRefreshData();


 currentImageData = { 
 original: null, 
 processed: null, 
 caseData: null, 
 manuallyBlurred: false 
 };

 } catch (error) {
 console.error('‚ùå Error saving evidence:', error);
 alert('‚ùå Error saving evidence: ' + error.message);
 }
};




async function handleEvidenceUpload() {
 if (uploadInProgress) return;

 const description = document.getElementById('evidenceDescription')?.value?.trim();
 const selectedMethod = document.querySelector('input[name="uploadMethod"]:checked')?.value || 'url';
 const selectedCaseType = document.querySelector('input[name="caseType"]:checked')?.value || 'new';
 const existingCaseId = selectedCaseType === 'existing' ? document.getElementById('existingCaseSelect')?.value : null;

 let imageSource = null;
 if (selectedMethod === 'url') {
 imageSource = document.getElementById('evidenceUrl')?.value?.trim();
 } else {
 imageSource = document.getElementById('evidenceFile')?.files?.[0];
 }

 if (!description || !imageSource) {
 alert('Please provide both description and evidence (image URL or file).');
 return;
 }

 const uploadBtn = document.getElementById('uploadConfirmBtn');
 const uploadBtnText = document.getElementById('uploadBtnText');
 const uploadSpinner = document.getElementById('uploadSpinner');

 try {
 uploadInProgress = true;
 document.querySelectorAll('button, input, select').forEach(el => el.disabled = true);

 if (uploadBtn) uploadBtn.disabled = true;
 if (uploadSpinner) uploadSpinner.style.display = 'inline-block';
 if (uploadBtnText) uploadBtnText.textContent = 'ü§ñ AI Processing...';

 const aiAnalysis = intelligentAI.analyzeContent(description);

 let originalImageUrl;
 if (selectedMethod === 'url') {
 originalImageUrl = imageSource;
 if (uploadBtnText) uploadBtnText.textContent = 'üõ°Ô∏è Privacy Protection...';
 } else {
 if (uploadBtnText) uploadBtnText.textContent = 'üìÅ Uploading File...';
 originalImageUrl = await uploadEvidenceFile(imageSource);
 }


 const enhancedBlurredUrl = await createEnhancedBlurredEvidence(originalImageUrl);
 if (uploadBtnText) uploadBtnText.textContent = 'üîç Processing Evidence...';

 let insertData;
 let isNewCase = true;
 let parentCaseNumber = null;


 if (selectedCaseType === 'existing' && existingCaseId) {

 const parentCase = dashboardData.clues.find(c => String(c.id) === String(existingCaseId));
 parentCaseNumber = parentCase ? getCaseNumber(parentCase) : null;

 insertData = {
 description: description,
 image_url: enhancedBlurredUrl,
 original_image_url: originalImageUrl,
 status: 'active',
 ai_analysis: aiAnalysis,
 parent_case_id: existingCaseId, 
 case_number: null, 
 priority: parentCase?.priority || 'medium',
 notes: '',
 created_at: new Date().toISOString()
 };
 isNewCase = false;
 } else {

 const caseNumber = generateCaseNumber();
 insertData = {
 description: description,
 image_url: enhancedBlurredUrl,
 original_image_url: originalImageUrl,
 status: 'active',
 ai_analysis: aiAnalysis,
 case_number: caseNumber, 
 parent_case_id: null,
 priority: 'medium',
 notes: '',
 created_at: new Date().toISOString()
 };
 }

 currentImageData = {
 original: originalImageUrl,
 processed: enhancedBlurredUrl,
 caseData: insertData,
 isNewCase: isNewCase,
 parentCaseNumber: parentCaseNumber,
 manuallyBlurred: false 
 };

 const uploadModal = bootstrap.Modal.getInstance(document.getElementById('fileUploadModal'));
 if (uploadModal) uploadModal.hide();

 showImagePreview();

 } catch (error) {
 console.error('Evidence upload error:', error);
 alert('‚ùå Error: ' + error.message);
 } finally {
 uploadInProgress = false;
 document.querySelectorAll('button, input, select').forEach(el => el.disabled = false);
 if (uploadBtn) uploadBtn.disabled = false;
 if (uploadSpinner) uploadSpinner.style.display = 'none';
 if (uploadBtnText) uploadBtnText.textContent = 'üì§ Upload Evidence';
 }
}
;

window.openBlurEditor = function() {
  if (!currentImageData.original) {
    return;
  }

  const blurModal = new bootstrap.Modal(document.getElementById('blurEditorModal'));
  blurModal.show();

  setTimeout(() => {
    blurEditor = new ManualBlurEditor('blurEditorCanvas', currentImageData.original);
  }, 500);
};

async function uploadEvidenceFile(file) {
  try {
    if (file.size > 10 * 1024 * 1024) {
      throw new Error('File too large. Maximum size is 10MB.');
    }

    const fileExt = file.name.split('.').pop();
    const fileName = `evidence-${Date.now()}-${Math.random().toString(36).substring(7)}.${fileExt}`;
    const filePath = `evidence/${fileName}`;

    const { data, error } = await supabase.storage
      .from('investigation-photos')
      .upload(filePath, file, { 
        contentType: file.type, 
        upsert: false,
        cacheControl: '3600'
      });

    if (error) {
      throw error;
    }

    const { data: urlData } = supabase.storage
      .from('investigation-photos')
      .getPublicUrl(filePath);

    return urlData.publicUrl;

  } catch (error) {
    throw error;
  }
}

async function createEnhancedBlurredEvidence(imageUrl) {

 if (currentImageData && currentImageData.manuallyBlurred && currentImageData.processed) {
 console.log('‚úÖ Using MANUAL blur - investigator preference respected');
 return currentImageData.processed;
 }

 console.log('ü§ñ Using AI auto-blur - no manual blur applied');

 return new Promise((resolve) => {
 try {
 const canvas = document.createElement('canvas');
 const ctx = canvas.getContext('2d');
 const img = new Image();
 img.crossOrigin = 'anonymous';

 img.onload = function() {
 canvas.width = img.width;
 canvas.height = img.height;

 ctx.drawImage(img, 0, 0, canvas.width, canvas.height);

 const tempCanvas = document.createElement('canvas');
 const tempCtx = tempCanvas.getContext('2d');
 tempCanvas.width = canvas.width;
 tempCanvas.height = canvas.height;
 tempCtx.drawImage(img, 0, 0, canvas.width, canvas.height);
 tempCtx.filter = 'blur(25px)';
 tempCtx.globalCompositeOperation = 'source-over';
 tempCtx.drawImage(tempCanvas, 0, 0);

 ctx.clearRect(0, 0, canvas.width, canvas.height * 0.6);
 ctx.drawImage(tempCanvas, 0, 0, canvas.width, canvas.height * 0.6, 0, 0, canvas.width, canvas.height * 0.6);
 ctx.drawImage(img, 0, canvas.height * 0.6, canvas.width, canvas.height * 0.4, 0, canvas.height * 0.6, canvas.width, canvas.height * 0.4);

 ctx.fillStyle = 'rgba(0, 0, 0, 0.8)';
 const blocks = [
 {x: canvas.width*0.15, y: canvas.height*0.1, w: canvas.width*0.25, h: canvas.height*0.25},
 {x: canvas.width*0.6, y: canvas.height*0.12, w: canvas.width*0.25, h: canvas.height*0.22},
 {x: canvas.width*0.35, y: canvas.height*0.25, w: canvas.width*0.22, h: canvas.height*0.18}
 ];

 for (const block of blocks) {
 roundRect(ctx, block.x, block.y, block.w, block.h, 15);
 ctx.fill();
 ctx.fillStyle = 'white';
 ctx.font = `${Math.min(block.h*0.4, 24)}px Arial`;
 ctx.textAlign = 'center';
 ctx.textBaseline = 'middle';
 ctx.fillText('üõ°Ô∏è', block.x + block.w/2, block.y + block.h/2);
 ctx.fillStyle = 'rgba(0, 0, 0, 0.8)';
 }

 ctx.font = 'bold 18px Arial';
 ctx.fillStyle = 'rgba(255, 255, 255, 0.95)';
 ctx.textAlign = 'center';
 ctx.fillText('PRIVACY PROTECTED', canvas.width/2, 25);

 ctx.font = '14px Arial';
 ctx.fillStyle = 'rgba(255, 255, 255, 0.8)';
 ctx.textAlign = 'center';
 ctx.fillText('Safe Tracer by NIDHIN R - Enhanced Privacy Protection', canvas.width/2, canvas.height-15);

 canvas.toBlob(async (blob) => {
 try {
 if (supabase && blob) {
 const fileName = `enhanced-privacy-${Date.now()}.jpg`;
 const filePath = `evidence/${fileName}`;
 const {data, error} = await supabase.storage
 .from('investigation-photos')
 .upload(filePath, blob, { contentType: 'image/jpeg', upsert: false });

 if (!error) {
 const { data: urlData } = supabase.storage
 .from('investigation-photos')
 .getPublicUrl(filePath);
 resolve(urlData.publicUrl);
 return;
 }
 }
 resolve(canvas.toDataURL('image/jpeg', 0.85));
 } catch(uploadError) {
 resolve(canvas.toDataURL('image/jpeg', 0.85));
 }
 }, 'image/jpeg', 0.85);
 };

 img.onerror = function() {
 resolve(imageUrl);
 };

 img.src = imageUrl;
 } catch (error) {
 resolve(imageUrl);
 }
 });
}


function roundRect(ctx, x, y, width, height, radius) {
  ctx.beginPath();
  ctx.moveTo(x + radius, y);
  ctx.lineTo(x + width - radius, y);
  ctx.quadraticCurveTo(x + width, y, x + width, y + radius);
  ctx.lineTo(x + width, y + height - radius);
  ctx.quadraticCurveTo(x + width, y + height, x + width - radius, y + height);
  ctx.lineTo(x + radius, y + height);
  ctx.quadraticCurveTo(x, y + height, x, y + height - radius);
  ctx.lineTo(x, y + radius);
  ctx.quadraticCurveTo(x, y, x + radius, y);
  ctx.closePath();
}

function openFileUploadModal() {
  resetUploadForm();
  const modal = new bootstrap.Modal(document.getElementById('fileUploadModal'));
  modal.show();
  setTimeout(() => {
    setupFileUploadHandlers();
  }, 200);
}

function setupFileUploadHandlers() {
  const uploadMethodRadios = document.querySelectorAll('input[name="uploadMethod"]');
  const urlSection = document.getElementById('urlUploadSection');
  const fileSection = document.getElementById('fileUploadSection');
  const evidenceUrl = document.getElementById('evidenceUrl');
  const evidenceFile = document.getElementById('evidenceFile');
  const previewImage = document.getElementById('previewImage');
  const imagePreview = document.getElementById('imagePreview');
  const uploadConfirmation = document.getElementById('uploadConfirmation');
  const uploadConfirmBtn = document.getElementById('uploadConfirmBtn');
  const evidenceDescription = document.getElementById('evidenceDescription');
  const caseTypeRadios = document.querySelectorAll('input[name="caseType"]');

  uploadMethodRadios.forEach(radio => {
    radio.removeEventListener('change', handleMethodChange);
    radio.addEventListener('change', handleMethodChange);
  });

  function handleMethodChange() {
    const selectedMethod = document.querySelector('input[name="uploadMethod"]:checked')?.value;
    if (selectedMethod === 'url') {
      if (urlSection) urlSection.style.display = 'block';
      if (fileSection) fileSection.style.display = 'none';
      if (evidenceFile) evidenceFile.value = '';
    } else {
      if (urlSection) urlSection.style.display = 'none';
      if (fileSection) fileSection.style.display = 'block';
      if (evidenceUrl) evidenceUrl.value = '';
    }
    if (imagePreview) imagePreview.style.display = 'none';
    checkUploadReadiness();
  }

  if (evidenceUrl) {
    evidenceUrl.removeEventListener('input', handleUrlInput);
    evidenceUrl.addEventListener('input', handleUrlInput);
  }

  function handleUrlInput() {
    const url = evidenceUrl.value.trim();
    if (url && isValidImageUrl(url)) {
      if (previewImage) {
        previewImage.src = url;
        previewImage.onload = function() {
          if (imagePreview) imagePreview.style.display = 'block';
          checkUploadReadiness();
        };
        previewImage.onerror = function() {
          if (imagePreview) imagePreview.style.display = 'none';
          checkUploadReadiness();
        };
      }
    } else {
      if (imagePreview) imagePreview.style.display = 'none';
      checkUploadReadiness();
    }
  }

  if (evidenceFile) {
    evidenceFile.removeEventListener('change', handleFileChange);
    evidenceFile.addEventListener('change', handleFileChange);
  }

  function handleFileChange(e) {
    const file = e.target.files[0];
    if (file) {
      if (file.size > 10 * 1024 * 1024) {
        alert('File too large. Maximum size is 10MB.');
        e.target.value = '';
        checkUploadReadiness();
        return;
      }

      const reader = new FileReader();
      reader.onload = function(e) {
        if (previewImage) previewImage.src = e.target.result;
        if (imagePreview) imagePreview.style.display = 'block';
        checkUploadReadiness();
      };
      reader.readAsDataURL(file);
    } else {
      if (imagePreview) imagePreview.style.display = 'none';
      checkUploadReadiness();
    }
  }

  if (uploadConfirmation) {
    uploadConfirmation.removeEventListener('change', checkUploadReadiness);
    uploadConfirmation.addEventListener('change', checkUploadReadiness);
  }

  if (uploadConfirmBtn) {
    uploadConfirmBtn.removeEventListener('click', handleEvidenceUpload);
    uploadConfirmBtn.addEventListener('click', handleEvidenceUpload);
  }

  if (evidenceDescription) {
    evidenceDescription.removeEventListener('input', checkUploadReadiness);
    evidenceDescription.addEventListener('input', checkUploadReadiness);
  }

  caseTypeRadios.forEach(radio => {
    radio.removeEventListener('change', handleCaseTypeChange);
    radio.addEventListener('change', handleCaseTypeChange);
  });

  function handleCaseTypeChange() {
    const selectedType = document.querySelector('input[name="caseType"]:checked')?.value;
    const caseSelection = document.getElementById('caseSelection');
    if (selectedType === 'existing' && caseSelection) {
      caseSelection.style.display = 'block';
      populateExistingCases();
    } else if (caseSelection) {
      caseSelection.style.display = 'none';
    }
    checkUploadReadiness();
  }

  function isValidImageUrl(url) {
    try {
      new URL(url);
      return /\.(jpg|jpeg|png|gif|webp|bmp|tiff)(\?.*)?$/i.test(url);
    } catch {
      return false;
    }
  }

  function checkUploadReadiness() {
    const description = evidenceDescription?.value?.trim() || '';
    const selectedMethod = document.querySelector('input[name="uploadMethod"]:checked')?.value || 'url';

    let hasValidSource = false;
    if (selectedMethod === 'url') {
      const urlValue = evidenceUrl?.value?.trim() || '';
      hasValidSource = urlValue && isValidImageUrl(urlValue);
    } else {
      hasValidSource = evidenceFile?.files?.[0] ? true : false;
    }

    const confirmed = uploadConfirmation?.checked || false;

    const selectedCaseType = document.querySelector('input[name="caseType"]:checked')?.value || 'new';
    let hasValidCase = false;
    if (selectedCaseType === 'new') {
      hasValidCase = true;
    } else if (selectedCaseType === 'existing') {
      const existingCaseSelect = document.getElementById('existingCaseSelect');
      hasValidCase = existingCaseSelect?.value ? true : false;
    }

    const isReady = description && hasValidSource && confirmed && hasValidCase;

    if (uploadConfirmBtn) {
      uploadConfirmBtn.disabled = !isReady;
      if (isReady) {
        uploadConfirmBtn.classList.remove('btn-secondary');
        uploadConfirmBtn.classList.add('btn-success');
      } else {
        uploadConfirmBtn.classList.remove('btn-success');
        uploadConfirmBtn.classList.add('btn-secondary');
      }
    }
  }

  function populateExistingCases() {
    const existingCaseSelect = document.getElementById('existingCaseSelect');
    if (!existingCaseSelect) return;

    existingCaseSelect.innerHTML = '<option value="">Select a case...</option>';
    const mainCases = dashboardData.clues.filter(clue => !isAdditionalEvidence(clue));

    if (mainCases.length > 0) {
      mainCases.forEach(clue => {
        if (clue.status !== 'resolved') {
          const option = document.createElement('option');
          option.value = clue.id;
          const caseNum = getCaseNumber(clue);
          option.textContent = `Case ${caseNum}: ${clue.description.substring(0, 50)}...`;
          existingCaseSelect.appendChild(option);
        }
      });
    }

    existingCaseSelect.removeEventListener('change', checkUploadReadiness);
    existingCaseSelect.addEventListener('change', checkUploadReadiness);
  }

  checkUploadReadiness();
}

function resetUploadForm() {
  const elements = {
    description: document.getElementById('evidenceDescription'),
    url: document.getElementById('evidenceUrl'),
    file: document.getElementById('evidenceFile'),
    preview: document.getElementById('imagePreview'),
    confirmation: document.getElementById('uploadConfirmation'),
    btn: document.getElementById('uploadConfirmBtn'),
    urlMethod: document.getElementById('urlMethod'),
    urlSection: document.getElementById('urlUploadSection'),
    fileSection: document.getElementById('fileUploadSection'),
    newCaseType: document.getElementById('newCaseType'),
    caseSelection: document.getElementById('caseSelection')
  };

  if (elements.description) elements.description.value = '';
  if (elements.url) elements.url.value = '';
  if (elements.file) elements.file.value = '';
  if (elements.preview) elements.preview.style.display = 'none';
  if (elements.confirmation) elements.confirmation.checked = false;
  if (elements.btn) {
    elements.btn.disabled = true;
    elements.btn.classList.remove('btn-success');
    elements.btn.classList.add('btn-secondary');
  }

  if (elements.urlMethod) elements.urlMethod.checked = true;
  if (elements.urlSection) elements.urlSection.style.display = 'block';
  if (elements.fileSection) elements.fileSection.style.display = 'none';
  if (elements.newCaseType) elements.newCaseType.checked = true;
  if (elements.caseSelection) elements.caseSelection.style.display = 'none';

  const modalTitle = document.querySelector('#fileUploadModal .modal-title');
  if (modalTitle) {
    modalTitle.textContent = 'üìÅ Upload Evidence - Enhanced Privacy Control';
  }
}

window.addEvidenceToCase = function(caseId) {
  const targetCase = dashboardData.clues.find(c => String(c.id) === String(caseId));
  if (!targetCase) {
    alert('Case not found!');
    return;
  }

  resetUploadForm();
  const modal = new bootstrap.Modal(document.getElementById('fileUploadModal'));
  modal.show();

  setTimeout(() => {
    const existingCaseRadio = document.getElementById('existingCaseType');
    const existingCaseSelect = document.getElementById('existingCaseSelect');
    const caseSelection = document.getElementById('caseSelection');

    if (existingCaseRadio) existingCaseRadio.checked = true;
    if (caseSelection) caseSelection.style.display = 'block';

    if (existingCaseSelect) {
      existingCaseSelect.innerHTML = '<option value="">Select a case...</option>';
      const mainCases = dashboardData.clues.filter(clue => !isAdditionalEvidence(clue));
      mainCases.forEach(clue => {
        if (clue.status !== 'resolved') {
          const option = document.createElement('option');
          option.value = clue.id;
          const caseNum = getCaseNumber(clue);
          option.textContent = `Case ${caseNum}: ${clue.description.substring(0, 50)}...`;
          if (clue.id == caseId) option.selected = true;
          existingCaseSelect.appendChild(option);
        }
      });
    }

    const modalTitle = document.querySelector('#fileUploadModal .modal-title');
    const caseNum = getCaseNumber(targetCase);
    if (modalTitle) {
      modalTitle.textContent = `üìé Add Evidence to Case ${caseNum}`;
    }

    setupFileUploadHandlers();
  }, 300);
};
window.setPriority = async function(clueId, priority) {
  try {
    const priorityBtns = document.querySelectorAll(`.priority-btn-${clueId}`);

    priorityBtns.forEach(btn => {
      btn.disabled = true;
      btn.innerHTML = '‚è≥';
    });

    const priorityCell = document.querySelector(`.priority-cell-${clueId}`);
    if (priorityCell) {
      const priorityBadge = priority === 'high' 
        ? '<span class="badge bg-danger">üö® HIGH</span>'
        : priority === 'low' 
        ? '<span class="badge bg-success">üìã LOW</span>'
        : '<span class="badge bg-warning">üìä MEDIUM</span>';
      priorityCell.innerHTML = priorityBadge;
    }

    try {
      const { error } = await supabase
        .from('clues')
        .update({ priority: priority, updated_at: new Date().toISOString() })
        .eq('id', clueId);
      if (error) throw error;
    } catch (e) {
      console.log('Priority update to database failed:', e);
    }

    const clue = dashboardData.clues.find(c => String(c.id) === String(clueId));
    if (clue) {
      clue.priority = priority;
    }

    const caseNum = getCaseNumber(clue);
    const priorityText = priority.toUpperCase();

    const priorityPopup = document.createElement('div');
    priorityPopup.style.cssText = `
      position: fixed; top: 50%; left: 50%; transform: translate(-50%, -50%);
      background: linear-gradient(135deg, #1a1a1a, #2d2d2d);
      border: 2px solid ${priority === 'high' ? '#dc3545' : priority === 'low' ? '#28a745' : '#ffc107'};
      border-radius: 15px; padding: 20px; z-index: 10000; color: #fff; text-align: center;
      font-family: 'Orbitron', monospace; box-shadow: 0 0 30px rgba(${priority === 'high' ? '220, 53, 69' : priority === 'low' ? '40, 167, 69' : '255, 193, 7'}, 0.3);
    `;
    priorityPopup.innerHTML = `
      <div style="font-size: 2rem; margin-bottom: 15px;">${priority === 'high' ? 'üö®' : priority === 'low' ? 'üìã' : 'üìä'}</div>
      <h4>Priority Updated Successfully</h4>
      <p>Case ${caseNum} priority set to <strong style="color: ${priority === 'high' ? '#dc3545' : priority === 'low' ? '#28a745' : '#ffc107'};">${priorityText}</strong></p>
    `;
    document.body.appendChild(priorityPopup);

    createToast('üéØ Priority Updated', `Case ${caseNum} priority set to ${priorityText}`, 'success');

    calculateAIStats();
    updateStatisticsCards();

    priorityBtns.forEach(btn => {
      btn.disabled = false;
      if (btn.title.toLowerCase().includes(priority)) {
        btn.innerHTML = '‚úÖ';
        setTimeout(() => {
          btn.innerHTML = btn.title.includes('High') ? 'üö®' : btn.title.includes('Medium') ? 'üìä' : 'üìã';
        }, 2000);
      } else {
        btn.innerHTML = btn.title.includes('High') ? 'üö®' : btn.title.includes('Medium') ? 'üìä' : 'üìã';
      }
    });

    setTimeout(() => {
      if (document.body.contains(priorityPopup)) document.body.removeChild(priorityPopup);
    }, 2000);

  } catch (error) {
    alert(`‚ùå Error updating priority: ${error.message}`);
    const priorityBtns = document.querySelectorAll(`.priority-btn-${clueId}`);
    priorityBtns.forEach(btn => {
      btn.disabled = false;
      btn.innerHTML = btn.title.includes('High') ? 'üö®' : btn.title.includes('Medium') ? 'üìä' : 'üìã';
    });
  }
};

window.flagTip = async function(tipId, flagType) {
  try {
    const tip = dashboardData.tips.find(t => String(t.id) === String(tipId));
    if (!tip) return;

    const updateData = {};
    updateData[flagType] = !tip[flagType];
    updateData.updated_at = new Date().toISOString();

    const { error } = await supabase
      .from('tips')
      .update(updateData)
      .eq('id', tipId);

    if (error) throw error;

    tip[flagType] = updateData[flagType];

    const flagBtn = document.querySelector(`[onclick="flagTip('${tipId}', '${flagType}')"]`);
    if (flagBtn) {
      const isActive = updateData[flagType];
      const flagIcon = flagType === 'flagged' ? 'üö©' : '‚≠ê';
      const inactiveIcon = flagType === 'flagged' ? '‚ö™' : '‚òÜ';

      flagBtn.innerHTML = isActive ? flagIcon : inactiveIcon;
      flagBtn.className = isActive 
        ? 'btn btn-sm btn-warning'
        : 'btn btn-sm btn-outline-secondary';
    }

    const statusText = flagType === 'flagged' ? 'flagged' : 'marked as useful';
    const actionText = updateData[flagType] ? statusText : `un${statusText}`;

    createToast('üè∑Ô∏è Tip Updated', `Tip ${actionText} successfully`, 'success');

  } catch (error) {
    console.error('Error flagging tip:', error);
    createToast('‚ùå Error', 'Failed to update tip status', 'warning');
  }
};

async function generateConfidentialReportWithWarning(caseId) {
  if (!caseId) {
    alert('Please select a case first.');
    return;
  }

  const warningAccepted = confirm(`‚ö†Ô∏è CONFIDENTIALITY WARNING ‚ö†Ô∏è

This action will generate a CONFIDENTIAL investigation report containing:
‚Ä¢ Sensitive case information
‚Ä¢ Unblurred original evidence images
‚Ä¢ Private investigator notes
‚Ä¢ Anonymous tip details with flags

UNAUTHORIZED USE, SHARING, OR DISTRIBUTION OF THIS REPORT IS STRICTLY PROHIBITED AND MAY RESULT IN SEVERE LEGAL ACTION.

By clicking OK, you acknowledge that:
1. You are an authorized investigator
2. You will handle this report according to law enforcement protocols
3. You understand the legal consequences of misuse

Generate confidential report?`);

  if (!warningAccepted) return;

  try {
    const { jsPDF } = window.jspdf;
    const pdf = new jsPDF({ orientation: 'portrait', unit: 'pt', format: 'a4' });

    const clue = dashboardData.clues.find(c => String(c.id) === String(caseId));
    if (!clue) {
      alert('Case not found for report generation');
      return;
    }

    const caseNumber = getCaseNumber(clue);
    const tips = dashboardData.tips.filter(t => String(t.clue_id) === String(caseId));
    const allEvidence = dashboardData.clues.filter(c => 
      c.id === clue.id || (isAdditionalEvidence(c) && getParentCaseId(c) === clue.id)
    );

    const pageWidth = pdf.internal.pageSize.getWidth();
    const pageHeight = pdf.internal.pageSize.getHeight();
    const margin = 40;

    function addWatermark() {
      pdf.setGState(pdf.GState({ opacity: 0.1 }));
      pdf.setTextColor(220, 53, 69);
      pdf.setFontSize(60);
      pdf.text('CONFIDENTIAL', pageWidth / 2, pageHeight / 2, { 
        align: 'center', 
        angle: 45 
      });
      pdf.setGState(pdf.GState({ opacity: 1 }));
      pdf.setTextColor(0, 0, 0);
    }

    function addHeader() {
      pdf.setFillColor(220, 53, 69);
      pdf.rect(0, 0, pageWidth, 50, 'F');
      pdf.setTextColor(255, 255, 255);
      pdf.setFontSize(18);
      pdf.setFont('helvetica', 'bold');
      pdf.text('CONFIDENTIAL - UNAUTHORIZED ACCESS PROHIBITED', pageWidth / 2, 30, { align: 'center' });

      pdf.setTextColor(0, 0, 0);
      pdf.setFont('helvetica', 'bold');
      pdf.setFontSize(24);
      pdf.text('SAFE TRACER INVESTIGATION REPORT', margin, 80);
      pdf.setFont('helvetica', 'normal');
      pdf.setFontSize(12);
      pdf.text('by NIDHIN R - AI-Powered Investigation System', margin, 100);
    }

    addHeader();
    addWatermark();

    let y = 140;

    pdf.setFont('helvetica', 'bold');
    pdf.setFontSize(16);
    pdf.text(`Case Number: ${caseNumber}`, margin, y);
    y += 25;

    pdf.setFont('helvetica', 'normal');
    pdf.setFontSize(12);
    pdf.text(`Report Generated: ${new Date().toLocaleString()}`, margin, y);
    y += 15;
    pdf.text(`Generated by: ${currentUser?.email || 'Investigator'}`, margin, y);
    y += 15;
    pdf.text(`Priority Level: ${(clue.priority || 'medium').toUpperCase()}`, margin, y);
    y += 15;
    pdf.text(`Case Status: ${(clue.status || 'active').toUpperCase()}`, margin, y);
    y += 30;

    pdf.setFont('helvetica', 'bold');
    pdf.setFontSize(14);
    pdf.text('Case Description:', margin, y);
    y += 20;

    pdf.setFont('helvetica', 'normal');
    pdf.setFontSize(11);
    const splitDescription = pdf.splitTextToSize(clue.description, 500);
    pdf.text(splitDescription, margin, y);
    y += splitDescription.length * 15 + 30;

    if (clue.notes) {
      if (y > pageHeight - 100) {
        pdf.addPage();
        addWatermark();
        y = 60;
      }
      pdf.setFont('helvetica', 'bold');
      pdf.setFontSize(14);
      pdf.text('Investigator Notes (CONFIDENTIAL):', margin, y);
      y += 20;
      pdf.setFont('helvetica', 'normal');
      pdf.setFontSize(11);
      const splitNotes = pdf.splitTextToSize(clue.notes, 500);
      pdf.text(splitNotes, margin, y);
      y += splitNotes.length * 15 + 30;
    }

    if (allEvidence.length > 1) {
      if (y > pageHeight - 100) {
        pdf.addPage();
        addWatermark();
        y = 60;
      }
      pdf.setFont('helvetica', 'bold');
      pdf.setFontSize(14);
      pdf.text(`Additional Evidence (${allEvidence.length - 1} pieces):`, margin, y);
      y += 20;

      allEvidence.slice(1).forEach((evidence, index) => {
        if (y > pageHeight - 50) {
          pdf.addPage();
          addWatermark();
          y = 60;
        }
        pdf.setFont('helvetica', 'normal');
        pdf.setFontSize(11);
        pdf.text(`Evidence ${index + 2}: ${evidence.description.substring(0, 80)}...`, margin + 20, y);
        y += 15;
      });
      y += 20;
    }

    if (tips.length > 0) {
      if (y > pageHeight - 100) {
        pdf.addPage();
        addWatermark();
        y = 60;
      }
      pdf.setFont('helvetica', 'bold');
      pdf.setFontSize(14);
      pdf.text(`Anonymous Tips Received (${tips.length}):`, margin, y);
      y += 20;

      const flaggedTips = tips.filter(t => t.flagged);
      const usefulTips = tips.filter(t => t.useful);

      if (flaggedTips.length > 0) {
        pdf.setTextColor(220, 53, 69);
        pdf.text(`üö© Flagged Tips (${flaggedTips.length}):`, margin + 20, y);
        pdf.setTextColor(0, 0, 0);
        y += 20;

        flaggedTips.forEach((tip, index) => {
          if (y > pageHeight - 50) {
            pdf.addPage();
            addWatermark();
            y = 60;
          }
          const tipText = tip.tip_text || tip.text || tip.tip || 'Photo evidence submitted';
          pdf.setFont('helvetica', 'normal');
          pdf.setFontSize(10);
          pdf.text(`${index + 1}. ${tipText.substring(0, 100)}...`, margin + 40, y);
          y += 15;
          if (tip.quality_score) {
            pdf.text(`Quality Score: ${Math.round(tip.quality_score * 100)}%`, margin + 50, y);
            y += 12;
          }
          y += 5;
        });
        y += 15;
      }

      if (usefulTips.length > 0) {
        pdf.setTextColor(0, 128, 0);
        pdf.text(`‚≠ê Useful Tips (${usefulTips.length}):`, margin + 20, y);
        pdf.setTextColor(0, 0, 0);
        y += 20;

        usefulTips.forEach((tip, index) => {
          if (y > pageHeight - 50) {
            pdf.addPage();
            addWatermark();
            y = 60;
          }
          const tipText = tip.tip_text || tip.text || tip.tip || 'Photo evidence submitted';
          pdf.setFont('helvetica', 'normal');
          pdf.setFontSize(10);
          pdf.text(`${index + 1}. ${tipText.substring(0, 100)}...`, margin + 40, y);
          y += 15;
          if (tip.quality_score) {
            pdf.text(`Quality Score: ${Math.round(tip.quality_score * 100)}%`, margin + 50, y);
            y += 12;
          }
          y += 5;
        });
        y += 15;
      }

      const regularTips = tips.filter(t => !t.flagged && !t.useful);
      if (regularTips.length > 0) {
        pdf.setTextColor(0, 0, 0);
        pdf.text(`üìù Other Tips (${regularTips.length}):`, margin + 20, y);
        y += 20;

        regularTips.forEach((tip, index) => {
          if (y > pageHeight - 50) {
            pdf.addPage();
            addWatermark();
            y = 60;
          }
          const tipText = tip.tip_text || tip.text || tip.tip || 'Photo evidence submitted';
          pdf.setFont('helvetica', 'normal');
          pdf.setFontSize(10);
          pdf.text(`${index + 1}. ${tipText.substring(0, 100)}...`, margin + 40, y);
          y += 15;
          if (tip.quality_score) {
            pdf.text(`Quality Score: ${Math.round(tip.quality_score * 100)}%`, margin + 50, y);
            y += 12;
          }
          y += 5;
        });
      }
    }

    const aiStory = await intelligentAI.generateAdvancedStory(clue, tips);
    if (y > pageHeight - 100) {
      pdf.addPage();
      addWatermark();
      y = 60;
    }
    pdf.setFont('helvetica', 'bold');
    pdf.setFontSize(14);
    pdf.text('AI Investigation Analysis:', margin, y);
    y += 20;

    pdf.setFont('helvetica', 'normal');
    pdf.setFontSize(10);
    const storyLines = aiStory.split('\n');
    storyLines.forEach(line => {
      if (line.trim()) {
        if (y > pageHeight - 30) {
          pdf.addPage();
          addWatermark();
          y = 60;
        }
        const splitLine = pdf.splitTextToSize(line, 500);
        pdf.text(splitLine, margin, y);
        y += splitLine.length * 12 + 5;
      }
    });

    if (y > pageHeight - 100) {
      pdf.addPage();
      addWatermark();
      y = 60;
    }

    pdf.setFont('helvetica', 'bold');
    pdf.setFontSize(14);
    pdf.text('Investigation Summary:', margin, y);
    y += 20;

    pdf.setFont('helvetica', 'normal');
    pdf.setFontSize(11);
    pdf.text(`Total Evidence Pieces: ${allEvidence.length}`, margin, y);
    y += 15;
    pdf.text(`Anonymous Tips: ${tips.length}`, margin, y);
    y += 15;
    pdf.text(`Flagged Tips: ${tips.filter(t => t.flagged).length}`, margin, y);
    y += 15;
    pdf.text(`Useful Tips: ${tips.filter(t => t.useful).length}`, margin, y);
    y += 15;
    pdf.text(`AI Risk Assessment: ${(clue.ai_analysis?.risk_level || 'medium').toUpperCase()}`, margin, y);
    y += 15;

    pdf.setFillColor(220, 53, 69);
    pdf.rect(0, pageHeight - 50, pageWidth, 50, 'F');
    pdf.setTextColor(255, 255, 255);
    pdf.setFont('helvetica', 'bold');
    pdf.setFontSize(8);
    pdf.text('This document contains confidential information for authorized law enforcement use only.', pageWidth / 2, pageHeight - 35, { align: 'center' });
    pdf.text('Generated by Safe Tracer Investigation Platform - Developed by NIDHIN R', pageWidth / 2, pageHeight - 25, { align: 'center' });
    pdf.text('r.nidhinofficial@gmail.com | AI-Powered Investigation System', pageWidth / 2, pageHeight - 15, { align: 'center' });

    pdf.save(`CONFIDENTIAL_SafeTracer_Report_Case_${caseNumber}.pdf`);
    createToast('üìÑ Confidential Report Generated', `Case ${caseNumber} report with watermark and full details`, 'success');

  } catch (error) {
    console.error('Report generation error:', error);
    alert('Error generating confidential report: ' + error.message);
  }
}

window.viewFullCaseDetails = async function(clueId) {
 activeCaseId = clueId;
 const clue = dashboardData.clues.find(c => String(c.id) === String(clueId));
 if (!clue) {
 alert('Case not found! Try refreshing the dashboard data.');
 return;
 }

 const tips = dashboardData.tips.filter(t => String(t.clue_id) === String(clueId));


 const allEvidence = dashboardData.clues.filter(c => {

 if (c.id === clue.id) return true;


 if (isAdditionalEvidence(c)) {
 const parentId = getParentCaseId(c);
 return String(parentId) === String(clue.id);
 }

 return false;
 });

 const isResolved = clue.status === 'resolved';
 const priority = clue.priority || 'medium';
 const caseNumber = getCaseNumber(clue);

 const aiStory = await intelligentAI.generateAdvancedStory(clue, tips);

 const caseDetailsHTML = `
 <div class="row">
 <div class="col-12">

 <h6 class="text-success mb-3">üìé All Case Evidence (${allEvidence.length} pieces)</h6>

 <div class="row">
 ${allEvidence.map((evidence, index) => `
 <div class="col-md-6 mb-3">
 <div class="card bg-dark border-secondary">
 <div class="card-body">
 <div class="d-flex justify-content-between align-items-start mb-2">
 <small class="text-muted">Evidence ${index + 1}</small>
 ${evidence.original_image_url ? `<button class="btn btn-sm btn-outline-warning" onclick="viewOriginalEvidence('${evidence.original_image_url}', '${evidence.id}')">üîí View Original</button>` : ''}
 </div>
 <img src="${evidence.image_url}" class="img-fluid rounded mb-2" style="max-height: 200px; width: 100%; object-fit: cover;" onclick="showEvidenceImage('${evidence.image_url}', 'Evidence ${index + 1}')" />
 <p class="small text-light mb-0">
 üõ°Ô∏è Privacy Protected
 </p>
 <p class="small">${evidence.description.length > 100 ? evidence.description.substring(0, 100) + '...' : evidence.description}</p>
 </div>
 </div>
 </div>
 `).join('')}
 </div>

 <hr class="border-secondary my-4">

 <h5 class="text-primary mb-3">üìã Case Information</h5>

 <p><strong>Case ID:</strong> Case ${caseNumber}</p>
 <p><strong>Primary Description:</strong> ${clue.description}</p>
 <p><strong>Created:</strong> ${new Date(clue.created_at).toLocaleString()}</p>
 <p><strong>Priority:</strong> ${priority.toUpperCase()}</p>
 <p><strong>Status:</strong> ${isResolved ? '‚úÖ RESOLVED' : 'üîç Active Investigation'}</p>
 <p><strong>Total Evidence:</strong> ${allEvidence.length} pieces</p>
 <p><strong>Anonymous Tips:</strong> ${tips.length} received</p>

 <div class="alert alert-info">
 <h6 class="text-info mb-2">üß† AI-Generated Advanced Investigation Story</h6>
 <div class="d-flex align-items-start">
 <div class="me-2">ü§î</div>
 <div class="small">
 ${aiStory.split('\n').map(line => `${line}<br>`).join('')}
 </div>
 </div>
 </div>

 <div class="mb-3">
 <label for="investigatorNotes-${clueId}" class="form-label">
 <h6 class="text-warning">üìì Investigator Notes (Private)</h6>
 </label>
 <textarea class="form-control bg-dark text-light border-secondary" id="investigatorNotes-${clueId}" rows="3" placeholder="Add private investigator notes...">${clue.notes || ''}</textarea>
 <button class="btn btn-sm btn-outline-success mt-2" onclick="saveInvestigatorNotes('${clueId}')">üíæ Save Notes</button>
 </div>

 <hr class="border-secondary">

 <h5 class="text-warning mb-3">üí¨ Anonymous Tips (${tips.length}) - Enhanced Management</h5>

 <div class="row">
 ${tips.length === 0 ? 'No tips received yet for this case.<br>' : tips.map((tip, i) => {
 const tipText = tip.tip_text || tip.text || tip.tip || 'Photo evidence submitted';
 const hasPhoto = tip.photo_url;
 const qualityScore = tip.quality_score ? Math.round(tip.quality_score * 100) : 0;
 const isFlagged = tip.flagged || false;
 const isUseful = tip.useful || false;

 return `
 <div class="col-12 mb-3">
 <div class="card bg-dark border-secondary">
 <div class="card-body">
 <div class="d-flex justify-content-between align-items-start">
 <h6 class="text-info mb-1">üí° Anonymous Tip #${i+1}
 ${isFlagged ? ' üö©' : ''} ${isUseful ? ' ‚≠ê' : ''}
 </h6>
 <div class="btn-group" role="group">
 <button class="btn btn-sm ${isFlagged ? 'btn-warning' : 'btn-outline-secondary'}" onclick="flagTip('${tip.id}', 'flagged')" title="Flag this tip">
 ${isFlagged ? 'üö©' : '‚ö™'}
 </button>
 <button class="btn btn-sm ${isUseful ? 'btn-success' : 'btn-outline-secondary'}" onclick="flagTip('${tip.id}', 'useful')" title="Mark as useful">
 ${isUseful ? '‚≠ê' : '‚òÜ'}
 </button>
 </div>
 </div>
 <p class="small text-muted mb-2">
 ${new Date(tip.created_at).toLocaleString()}
 </p>

 <p class="mb-2" style="
   background-color: rgba(40, 167, 69, 0.2);
   color: #ffffff;
   padding: 0.5rem;
   border-radius: 4px;
   display: inline-block;
 ">
   <strong style="color: #28a745;">Tip:</strong> ${tipText}
 </p>


 ${qualityScore > 0 ? `
 <div class="mb-2">
 <small class="text-success">
 <strong>AI Quality Score:</strong> ${qualityScore}% 
 ${qualityScore >= 80 ? 'üåü Excellent' : qualityScore >= 60 ? 'üëç Good' : qualityScore >= 40 ? 'üìù Fair' : 'üí≠ Basic'}
 </small>
 </div>
 ` : ''}

 ${hasPhoto ? `
 <div class="mt-2">
 <button class="btn btn-sm btn-outline-info" onclick="showEvidenceImage('${tip.photo_url}', 'Tip Photo')">
  üì∏ Photo Evidence Attached
 </button>
 </div>
 ` : ''}
 </div>
 </div>
 </div>
 `;
 }).join('')}
 </div>

 <hr class="border-secondary">

 <div class="row">
 <div class="col-md-6">
 <button class="btn btn-success w-100" onclick="addEvidenceToCase('${clueId}')">
 üìé Add More Evidence
 </button>
 </div>
 <div class="col-md-6">
 <button class="btn btn-info w-100" onclick="generateConfidentialReportWithWarning('${clueId}')">
  üìÑ Generate Report
 </button>
 </div>
 </div>

 ${!isResolved ? `<div class="row mt-2">
 <div class="col-md-6">
 <button class="btn btn-warning w-100" onclick="resolveCase('${clueId}')">‚úÖ Mark Resolved</button>
 </div>
 <div class="col-md-6">
 <button class="btn btn-danger w-100" onclick="deleteCase('${clueId}')">üóëÔ∏è Delete Case</button>
 </div>
 </div>` : `<div class="row mt-2">
 <div class="col-md-6">
 <button class="btn btn-secondary w-100" onclick="reopenCase('${clueId}')">üîÑ Reopen Case</button>
 </div>
 <div class="col-md-6">
 <button class="btn btn-danger w-100" onclick="deleteCase('${clueId}')">üóëÔ∏è Delete Case</button>
 </div>
 </div>`}
 </div>
 </div>
 `;

 const titleElement = document.getElementById('caseDetailsTitle');
 const bodyElement = document.getElementById('caseDetailsBody');
 if (titleElement) titleElement.innerHTML = `Case ${caseNumber} Details ${isResolved ? '(RESOLVED)' : ''} - ${allEvidence.length} Evidence`;
 if (bodyElement) bodyElement.innerHTML = caseDetailsHTML;

 const modal = new bootstrap.Modal(document.getElementById('caseDetailsModal'));
 modal.show();
};


window.showEvidenceImage = function(imageSrc, title) {
  const existingModal = document.getElementById('imageModal');
  if (!existingModal) {
    document.body.insertAdjacentHTML('beforeend', `
      <div class="modal fade" id="imageModal" tabindex="-1">
        <div class="modal-dialog modal-lg">
          <div class="modal-content bg-dark text-light">
            <div class="modal-header">
              <h5 class="modal-title" id="imageModalTitle">Evidence</h5>
              <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body text-center">
              <img id="modalImage" src="" alt="Evidence" style="max-width: 100%; max-height: 80vh;">
            </div>
          </div>
        </div>
      </div>
    `);
  }

  const modalImage = document.getElementById('modalImage');
  const imageModalTitle = document.getElementById('imageModalTitle');
  if (modalImage) modalImage.src = imageSrc;
  if (imageModalTitle) imageModalTitle.textContent = title;

  const modal = new bootstrap.Modal(document.getElementById('imageModal'));
  modal.show();
};

window.saveInvestigatorNotes = async function(clueId) {
  const notesTextarea = document.getElementById(`investigatorNotes-${clueId}`);
  if (!notesTextarea) {
    console.error('Notes textarea not found for clue:', clueId);
    return;
  }

  const saveButton = notesTextarea.parentNode.querySelector('button');
  const notes = notesTextarea.value.trim();
  const originalButtonText = saveButton ? saveButton.textContent : '';

  try {
    if (saveButton) {
      saveButton.disabled = true;
      saveButton.textContent = 'üíæ Saving...';
    }

    const { data, error } = await supabase
      .from('clues')
      .update({ 
        notes: notes,
        updated_at: new Date().toISOString()
      })
      .eq('id', clueId)
      .select();

    if (error) {
      throw error;
    }

    const clue = dashboardData.clues.find(c => String(c.id) === String(clueId));
    if (clue) {
      clue.notes = notes;
    }

    createToast('üìì Notes Saved Successfully', 'Investigator notes updated and stored securely', 'success');

    if (saveButton) {
      saveButton.textContent = '‚úÖ Saved!';
      saveButton.style.background = 'linear-gradient(45deg, #28a745, #20c997)';
    }

  } catch (error) {
    console.error('Error saving investigator notes:', error);
    alert('‚ùå Error saving notes: ' + error.message + '\n\nPlease try again.');

    if (saveButton) {
      saveButton.textContent = '‚ùå Save Failed';
      saveButton.style.background = 'linear-gradient(45deg, #dc3545, #fd7e14)';
    }
  } finally {
    if (saveButton) {
      setTimeout(() => {
        saveButton.disabled = false;
        saveButton.textContent = originalButtonText;
        saveButton.style.background = '';
      }, 2000);
    }
  }
};
window.viewOriginalEvidence = function(originalUrl, caseId) {
  if (confirm('‚ö†Ô∏è View unblurred original evidence?\n\nThis action will be logged.\nFor authorized investigators only.')) {
    const modalHTML = `
      <div class="modal fade" id="originalEvidenceModal" tabindex="-1">
        <div class="modal-dialog modal-xl">
          <div class="modal-content bg-dark text-light">
            <div class="modal-header border-bottom border-success">
              <h5 class="modal-title text-success">
                üîí AUTHORIZED ORIGINAL EVIDENCE ACCESS - SAFE TRACER by NIDHIN R
              </h5>
              <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body text-center">
              <div class="access-header mb-3 p-3" style="background: linear-gradient(135deg, #1a1a1a, #2d2d2d); border-radius: 10px; border: 1px solid #39ff14;">
                <div class="row">
                  <div class="col-md-4">
                    <strong class="text-warning">Accessed By:</strong><br>
                    <span class="text-light">${currentUser?.email || 'Investigator'}</span>
                  </div>
                  <div class="col-md-4">
                    <strong class="text-warning">Access Time:</strong><br>
                    <span class="text-light">${new Date().toLocaleString()}</span>
                  </div>
                  <div class="col-md-4">
                    <strong class="text-success">Platform:</strong><br>
                    <span class="text-light">Safe Tracer by NIDHIN R</span>
                  </div>
                </div>
                <div class="mt-2">
                  <small class="text-success">üõ°Ô∏è CONFIDENTIAL - Authorized Access Only</small>
                </div>
              </div>

              <div style="position: relative;">
                <div style="position: absolute; top: 10px; left: 10px; background: rgba(57, 255, 20, 0.9); color: #000; padding: 8px 12px; border-radius: 5px; font-weight: bold; z-index: 10;">
                  üõ°Ô∏è SAFE TRACER by NIDHIN R
                </div>
                <div style="position: absolute; top: 10px; right: 10px; background: rgba(220, 53, 69, 0.9); color: #fff; padding: 8px 12px; border-radius: 5px; font-weight: bold; z-index: 10;">
                  CONFIDENTIAL
                </div>
                <div class="evidence-frame" style="border: 3px solid #39ff14; border-radius: 10px; padding: 10px; background: #000;">
                  <img src="${originalUrl}" alt="Original Evidence" style="max-width: 100%; max-height: 70vh; border-radius: 5px;"
                       onerror="this.src='https://via.placeholder.com/600x400/333333/ffffff?text=Original+Evidence+Not+Available'">
                </div>
              </div>

              <div class="access-warning mt-3 p-3" style="background: rgba(220, 53, 69, 0.1); border: 2px solid #dc3545; border-radius: 5px;">
                <h6 class="text-danger mb-2">‚ö†Ô∏è SECURITY NOTICE</h6>
                <p class="text-danger mb-1">This access has been logged for security and audit purposes.</p>
                <p class="text-warning mb-0">Unauthorized sharing or distribution is strictly prohibited and may result in legal action.</p>
              </div>
            </div>
            <div class="modal-footer">
              <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close Evidence</button>
            </div>
          </div>
        </div>
      </div>
    `;

    document.body.insertAdjacentHTML('beforeend', modalHTML);
    const modal = new bootstrap.Modal(document.getElementById('originalEvidenceModal'));
    modal.show();

    modal._element.addEventListener('hidden.bs.modal', function () {
      const modalElement = document.getElementById('originalEvidenceModal');
      if (modalElement) modalElement.remove();
    });

    try {
      supabase.from('evidence_access_log').insert({
        clue_id: caseId,
        accessed_by: currentUser?.email || 'unknown',
        access_type: 'original_evidence_view',
        accessed_at: new Date().toISOString()
      });
    } catch (logError) {
      console.log('Access logging failed but evidence displayed');
    }
  }
};

window.resolveCase = async function(clueId) {
  if (confirm('Mark this entire case as resolved? This will resolve the main case and all related evidence.')) {
    try {
      const { error } = await supabase
        .from('clues')
        .update({ status: 'resolved', resolved_at: new Date() })
        .eq('id', clueId);
      if (error) throw error;

      await supabase
        .from('clues')
        .update({ status: 'resolved', resolved_at: new Date() })
        .eq('parent_case_id', clueId);

      createToast('‚úÖ Case Resolved', 'Entire case resolved successfully', 'success');
      safeRefreshData();
      bootstrap.Modal.getInstance(document.getElementById('caseDetailsModal')).hide();
    } catch (error) {
      alert('‚ùå Error: ' + error.message);
    }
  }
};

window.reopenCase = async function(clueId) {
  if (confirm('Reopen this resolved case? This will reopen the main case and all related evidence.')) {
    try {
      const { error } = await supabase
        .from('clues')
        .update({ status: 'active', resolved_at: null })
        .eq('id', clueId);
      if (error) throw error;

      await supabase
        .from('clues')
        .update({ status: 'active', resolved_at: null })
        .eq('parent_case_id', clueId);

      createToast('üîÑ Case Reopened', 'Entire case reopened successfully', 'info');
      safeRefreshData();
      bootstrap.Modal.getInstance(document.getElementById('caseDetailsModal')).hide();
    } catch (error) {
      alert('‚ùå Error: ' + error.message);
    }
  }
};

window.deleteCase = async function(clueId) {
 const clue = dashboardData.clues.find(c => String(c.id) === String(clueId));
 const caseNum = getCaseNumber(clue);


 if (!confirm(`üóëÔ∏è DELETE Entire Case ${caseNum} permanently?\n\nThis will delete ALL evidence, tips, and everything related to this case!\n\nThis action CANNOT be undone!`)) {
 return;
 }

 const confirmText = prompt('Type "DELETE CASE" to confirm:');
 if (confirmText !== 'DELETE CASE') {
 alert('‚ùå Deletion cancelled - confirmation text did not match.');
 return;
 }

 try {
 console.log(`üóëÔ∏è Starting deletion of case ${caseNum} (ID: ${clueId})`);


 console.log('Step 1: Deleting tips...');
 const { error: tipsError } = await supabase
 .from('tips')
 .delete()
 .eq('clue_id', clueId);

 if (tipsError) {
 console.error('Tips deletion error:', tipsError);
 throw new Error(`Failed to delete tips: ${tipsError.message}`);
 }


 console.log('Step 2: Deleting additional evidence...');
 const { error: childrenError } = await supabase
 .from('clues')
 .delete()
 .eq('parent_case_id', clueId);

 if (childrenError) {
 console.error('Additional evidence deletion error:', childrenError);
 throw new Error(`Failed to delete additional evidence: ${childrenError.message}`);
 }


 console.log('Step 3: Deleting main case...');
 const { error: mainCaseError } = await supabase
 .from('clues')
 .delete()
 .eq('id', clueId);

 if (mainCaseError) {
 console.error('Main case deletion error:', mainCaseError);
 throw new Error(`Failed to delete main case: ${mainCaseError.message}`);
 }

 console.log('‚úÖ Case deletion completed successfully');


 createToast('üóëÔ∏è Case Deleted', `Case ${caseNum} and ALL related evidence deleted successfully`, 'warning');


 await safeRefreshData();


 const modal = bootstrap.Modal.getInstance(document.getElementById('caseDetailsModal'));
 if (modal) modal.hide();


 const successPopup = document.createElement('div');
 successPopup.style.cssText = `
 position: fixed; top: 50%; left: 50%; transform: translate(-50%, -50%);
 background: linear-gradient(135deg, #dc3545, #c82333); border: 2px solid #fff;
 border-radius: 15px; padding: 30px; z-index: 10000; color: white;
 text-align: center; font-family: 'Orbitron', monospace;
 box-shadow: 0 0 30px rgba(220, 53, 69, 0.5);
 `;
 successPopup.innerHTML = `
 <div style="font-size: 48px; margin-bottom: 15px;">üóëÔ∏è</div>
 <h4>CASE DELETED SUCCESSFULLY</h4>
 <p>Case ${caseNum} and all related data has been permanently deleted.</p>
 <p><strong>Safe Tracer by NIDHIN R</strong></p>
 `;
 document.body.appendChild(successPopup);

 setTimeout(() => {
 if (document.body.contains(successPopup)) document.body.removeChild(successPopup);
 }, 4000);

 } catch (error) {
 console.error('‚ùå Case deletion failed:', error);
 alert(`‚ùå Error deleting case: ${error.message}\n\nPlease try again or contact support.`);


 await safeRefreshData();
 }
};


async function loadPublicReports() {
  if (!supabase) {
    console.warn('Cannot load public reports: Supabase not available');
    return;
  }

  try {
    const { data: reports, error } = await supabase
      .from('public_reports')
      .select('*')
      .order('created_at', { ascending: false });

    if (error) {
      console.error('Error loading public reports:', error);
      createToast('‚ö†Ô∏è Reports Loading Issue', 'Some public reports may not be current', 'warning');
      dashboardData.publicReports = [];
    } else {
      dashboardData.publicReports = reports || [];
    }

    updatePublicReportsTable();
    updatePublicReportsBadge();

  } catch (error) {
    console.error('Critical error loading public reports:', error);
    createToast('‚ùå Reports Loading Failed', 'Public reports could not be loaded', 'warning');
  }
}

function updatePublicReportsTable() {
  const tbody = document.getElementById('publicReportsTableBody');
  if (!tbody) {
    console.warn('Public reports table body not found');
    return;
  }

  tbody.innerHTML = '';

  const allReports = dashboardData.publicReports;
  const pendingCount = allReports.filter(r => r.status === 'pending').length;
  const approvedCount = allReports.filter(r => r.status === 'approved').length;
  const rejectedCount = allReports.filter(r => r.status === 'rejected').length;

  if (allReports.length === 0) {
    tbody.innerHTML = `
      <tr>
        <td colspan="5" class="text-center">
          <div class="no-data-message">
            <div style="font-size: 2rem; margin-bottom: 10px;">üì≠</div>
            No public reports submitted yet.<br>
            <small>Citizens can submit reports via the public portal.</small>
          </div>
        </td>
      </tr>
    `;
    return;
  }

  tbody.innerHTML = `
    <tr style="background: rgba(57, 255, 20, 0.1); border-bottom: 2px solid rgba(57, 255, 20, 0.3);">
      <td colspan="5" class="text-center py-3">
        <div style="display: flex; justify-content: center; gap: 15px; flex-wrap: wrap; align-items: center;">
          <strong style="color: #39ff14;">üìä ADMIN REPORT OVERVIEW:</strong> 
          <span class="badge bg-warning ms-2">‚è≥ Pending: ${pendingCount}</span>
          <span class="badge bg-success ms-2">‚úÖ Approved: ${approvedCount}</span>
          <span class="badge bg-danger ms-2">‚ùå Rejected: ${rejectedCount}</span>
          <span class="badge bg-info ms-2">üìã Total: ${allReports.length}</span>
        </div>
      </td>
    </tr>
  `;

  allReports.forEach(report => {
    const statusClass = report.status === 'pending' ? 'bg-warning' : 
                       report.status === 'approved' ? 'bg-success' : 'bg-danger';
    const statusText = report.status.toUpperCase();
    const statusIcon = report.status === 'pending' ? '‚è≥' : 
                      report.status === 'approved' ? '‚úÖ' : '‚ùå';

    const row = document.createElement('tr');
    if (report.status === 'approved') row.style.background = 'rgba(40, 167, 69, 0.1)';
    if (report.status === 'rejected') row.style.background = 'rgba(220, 53, 69, 0.1)';
    if (report.status === 'pending') row.style.background = 'rgba(255, 193, 7, 0.1)';

    row.innerHTML = `
      <td><strong>Report ${report.id.substring(0, 8)}</strong><br>
          <small class="text-muted">ID: ${report.id}</small></td>
      <td style="max-width: 300px;">${report.description.length > 80 ? report.description.substring(0, 80) + '...' : report.description}
          ${report.image_url ? '<br><small class="text-info">üì∑ Image attached</small>' : ''}</td>
      <td>${new Date(report.created_at).toLocaleDateString()}<br>
          <small class="text-muted">${new Date(report.created_at).toLocaleTimeString()}</small></td>
      <td><span class="badge ${statusClass}">${statusIcon} ${statusText}</span>
          ${report.processed_at ? `<br><small class="text-success">Processed: ${new Date(report.processed_at).toLocaleDateString()}</small>` : ''}
          <br><small class="text-muted">By: ${report.submitted_by || 'Anonymous'}</small></td>
      <td>
        <div class="btn-group-vertical btn-group-sm">
          ${report.status === 'pending' ? `
            <button class="btn btn-outline-info mb-1" onclick="reviewPublicReport('${report.id}')" title="Review & Process">
              üëÅÔ∏è Review & Process
            </button>
            <button class="btn btn-outline-danger" onclick="rejectPublicReport('${report.id}')" title="Reject Report">
              ‚ùå Reject Report
            </button>
          ` : `
            <button class="btn btn-outline-secondary mb-1" onclick="reviewPublicReport('${report.id}')" title="View Details">
              üëÅÔ∏è View Details
            </button>
            ${report.status === 'approved' ? `
              <small class="badge bg-success">‚úÖ Approved</small>
            ` : `
              <small class="badge bg-danger">‚ùå Rejected</small>
            `}
          `}
        </div>
      </td>
    `;
    tbody.appendChild(row);
  });
}

function updatePublicReportsBadge() {
  const badge = document.getElementById('pendingReportsBadge');
  const pendingCount = dashboardData.publicReports.filter(r => r.status === 'pending').length;

  if (badge) {
    if (pendingCount > 0) {
      badge.textContent = pendingCount;
      badge.style.display = 'inline-block';
    } else {
      badge.style.display = 'none';
    }
  }
}

window.reviewPublicReport = function(reportId) {
  const report = dashboardData.publicReports.find(r => String(r.id) === String(reportId));
  if (!report) {
    alert('Report not found');
    return;
  }

  const modalHTML = `
    <div class="modal fade" id="reviewReportModal" tabindex="-1">
      <div class="modal-dialog modal-xl">
        <div class="modal-content bg-dark text-light">
          <div class="modal-header">
            <h5 class="modal-title">üìã Review Public Report #${report.id.substring(0, 8)}</h5>
            <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal"></button>
          </div>
          <div class="modal-body">
            <div class="row">
              <div class="col-md-6">
                <h6>üìù Original Report Details</h6>
                <div class="alert alert-info">
                  <strong>Submitted:</strong> ${new Date(report.created_at).toLocaleString()}<br>
                  <strong>Contact:</strong> ${report.submitted_by || 'Anonymous'}<br>
                  <strong>Status:</strong> ${report.status.toUpperCase()}
                </div>
                <div class="form-group mb-3">
                  <label>Original Description:</label>
                  <div class="p-3 bg-secondary rounded">
                    ${report.description}
                  </div>
                </div>
                ${report.image_url ? `
                  <div class="form-group mb-3">
                    <label>Submitted Evidence:</label><br>
                    <img src="${report.image_url}" alt="Report Evidence" 
                         style="max-width: 100%; max-height: 300px; border: 2px solid #39ff14; border-radius: 8px;"
                         onerror="this.src='https://via.placeholder.com/300x200/333333/ffffff?text=Image+Not+Available'">
                  </div>
                ` : ''}
              </div>
              <div class="col-md-6">
                ${report.status === 'pending' ? `
                  <h6>‚úèÔ∏è Create Investigation Case</h6>
                  <div class="form-group mb-3">
                    <label for="editedDescription">Case Description:</label>
                    <textarea id="editedDescription" class="form-control" rows="6">${report.description}</textarea>
                    <small class="text-muted">Edit and refine the description for the investigation case</small>
                  </div>
                  <div class="form-group mb-3">
                    <label for="initialPriority">Initial Priority:</label>
                    <select id="initialPriority" class="form-select">
                      <option value="low">Low Priority</option>
                      <option value="medium" selected>Medium Priority</option>
                      <option value="high">High Priority</option>
                    </select>
                  </div>
                  <div class="form-group mb-3">
                    <label for="investigatorNotes">Investigator Notes (Private):</label>
                    <textarea id="investigatorNotes" class="form-control" rows="3" 
                              placeholder="Add any private notes about this case..."></textarea>
                  </div>
                ` : `
                  <h6>üìÑ Report Status</h6>
                  <div class="alert alert-${report.status === 'approved' ? 'success' : 'danger'}">
                    <strong>Status:</strong> ${report.status.toUpperCase()}<br>
                    ${report.processed_at ? `<strong>Processed:</strong> ${new Date(report.processed_at).toLocaleString()}` : ''}
                  </div>
                  <p>This report has already been ${report.status}.</p>
                `}
              </div>
            </div>
          </div>
          <div class="modal-footer">
            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
            ${report.status === 'pending' ? `
              <button type="button" class="btn btn-success" onclick="approveEditedReport('${report.id}')">
                ‚úÖ Create Investigation Case
              </button>
            ` : ''}
          </div>
        </div>
      </div>
    </div>
  `;

  document.body.insertAdjacentHTML('beforeend', modalHTML);
  const modal = new bootstrap.Modal(document.getElementById('reviewReportModal'));
  modal.show();

  modal._element.addEventListener('hidden.bs.modal', function () {
    const modalElement = document.getElementById('reviewReportModal');
    if (modalElement) modalElement.remove();
  });
};

window.approveEditedReport = async function(reportId) {
  try {
    const report = dashboardData.publicReports.find(r => String(r.id) === String(reportId));
    if (!report) {
      alert('‚ùå Report not found');
      return;
    }

    const editedDescription = document.getElementById('editedDescription')?.value?.trim();
    const priority = document.getElementById('initialPriority')?.value || 'medium';
    const notes = document.getElementById('investigatorNotes')?.value?.trim() || '';

    if (!editedDescription) {
      alert('‚ùå Please provide a case description before approving');
      return;
    }

    const caseNumber = generateCaseNumber();
    const aiAnalysis = intelligentAI.analyzeContent(editedDescription);

    let processedImageUrl = 'https://via.placeholder.com/400x300/333333/ffffff?text=Investigation+Case';
    if (report.image_url) {
      try {
        processedImageUrl = await createEnhancedBlurredEvidence(report.image_url);
      } catch (error) {
        processedImageUrl = report.image_url || processedImageUrl;
      }
    }

    const clueData = {
      description: editedDescription,
      image_url: processedImageUrl,
      original_image_url: report.image_url,
      status: 'active',
      ai_analysis: aiAnalysis,
      case_number: caseNumber,
      priority: priority,
      notes: notes,
      created_at: new Date().toISOString()
    };

    const { data: newClue, error: clueError } = await supabase
      .from('clues')
      .insert(clueData)
      .select();

    if (clueError) throw clueError;

    const { data: updatedReport, error: updateError } = await supabase
      .from('public_reports')
      .update({ 
        status: 'approved', 
        processed_at: new Date().toISOString(),
        processed_by: currentUser?.email || 'Admin'
      })
      .eq('id', reportId)
      .select();

    if (updateError) throw updateError;

    createToast('‚úÖ Report Approved Successfully', `Public report converted to Investigation Case ${caseNumber}`, 'success');

    const modal = bootstrap.Modal.getInstance(document.getElementById('reviewReportModal'));
    if (modal) modal.hide();

    await loadPublicReports();
    await safeRefreshData();
    updatePublicReportsBadge();

  } catch (error) {
    console.error('Error approving report:', error);
    alert('‚ùå Error approving report: ' + error.message);
  }
};

window.rejectPublicReport = async function(reportId) {
  const confirmReject = confirm('‚ö†Ô∏è Reject this public report permanently?\n\nThis action cannot be undone.');

  if (!confirmReject) return;

  try {
    const { data, error } = await supabase
      .from('public_reports')
      .update({ 
        status: 'rejected', 
        processed_at: new Date().toISOString(),
        processed_by: currentUser?.email || 'Admin'
      })
      .eq('id', reportId)
      .select();

    if (error) throw error;

    createToast('‚ùå Report Rejected', 'Public report has been rejected', 'warning');

    await loadPublicReports();
    updatePublicReportsBadge();

  } catch (error) {
    console.error('Error rejecting report:', error);
    alert('‚ùå Error rejecting report: ' + error.message);
  }
};

async function updateInvestigationsTable() {
  const tbody = document.getElementById('investigationsTableBody');
  if (!tbody) {
    console.warn('Investigations table body not found');
    return;
  }

  tbody.innerHTML = '';

  const mainInvestigations = dashboardData.clues.filter(clue => !isAdditionalEvidence(clue));

  if (mainInvestigations.length === 0) {
    tbody.innerHTML = `
      <tr>
        <td colspan="7" class="text-center">
          <div class="no-data-message">
            <div style="font-size: 2rem; margin-bottom: 10px;">üìã</div>
            No investigation cases found.<br>
            <small>Use "AI Upload & Sanitize Evidence" to add new cases.</small>
            <br><br>
            <button class="btn btn-primary btn-sm" onclick="openFileUploadModal()">
              ü§ñ Start New Investigation
            </button>
          </div>
        </td>
      </tr>
    `;
    return;
  }

  mainInvestigations.forEach(clue => {
    const clueTips = dashboardData.tips.filter(tip => 
      String(tip.clue_id) === String(clue.id)
    );
    const tipCount = clueTips.length;
    const riskLevel = clue.ai_analysis?.risk_level || 'medium';
    const priority = clue.priority || 'medium';
    const status = clue.status || 'active';
    const caseNumber = getCaseNumber(clue);

    const allCaseEvidence = dashboardData.clues.filter(c => 
      c.id === clue.id || (isAdditionalEvidence(c) && String(getParentCaseId(c)) === String(clue.id))
    );
    const evidenceCount = allCaseEvidence.length;

    const priorityBadge = priority === 'high' 
      ? '<span class="badge bg-danger">üö® HIGH</span>'
      : priority === 'low' 
      ? '<span class="badge bg-success">üìã LOW</span>'
      : '<span class="badge bg-warning">üìä MEDIUM</span>';

    const statusBadge = status === 'resolved' 
      ? '<span class="badge bg-success">‚úÖ RESOLVED</span>'
      : status === 'pending_review'
      ? '<span class="badge bg-info">üîç PENDING REVIEW</span>'
      : '<span class="badge bg-info">üîç ACTIVE</span>';

    const evidenceBadge = evidenceCount > 1 
      ? `<span class="badge bg-purple ms-1" title="Evidence Count">${evidenceCount} üìé</span>`
      : '';

    const row = document.createElement('tr');
    row.id = `case-row-${clue.id}`;
    if (status === 'resolved') {
      row.style.opacity = '0.7';
    }
    if (status === 'pending_review') {
      row.style.background = 'rgba(255, 193, 7, 0.1)';
    }

    row.innerHTML = `
      <td><strong>Case ${caseNumber}</strong>${evidenceBadge}</td>
      <td>${clue.description.length > 50 ? clue.description.substring(0, 50) + '...' : clue.description}</td>
      <td><span class="badge bg-primary">${tipCount}</span></td>
      <td class="priority-cell-${clue.id}">${priorityBadge}</td>
      <td><span class="badge bg-warning">${riskLevel.toUpperCase()}</span></td>
      <td>${statusBadge}</td>
      <td>
        <div class="btn-group btn-group-sm">
          <button class="btn btn-outline-light" onclick="viewFullCaseDetails('${clue.id}')" title="View Details">
            üìã
          </button>
          <button class="btn btn-outline-info" onclick="addEvidenceToCase('${clue.id}')" title="Add Evidence">
            üìé
          </button>
          <button class="btn btn-outline-danger priority-btn priority-btn-${clue.id}" onclick="setPriority('${clue.id}', 'high')" title="Set High Priority">
            üö®
          </button>
          <button class="btn btn-outline-warning priority-btn priority-btn-${clue.id}" onclick="setPriority('${clue.id}', 'medium')" title="Set Medium Priority">
            üìä
          </button>
          <button class="btn btn-outline-success priority-btn priority-btn-${clue.id}" onclick="setPriority('${clue.id}', 'low')" title="Set Low Priority">
            üìã
          </button>
        </div>
      </td>
    `;
    tbody.appendChild(row);
  });
}

function updateAICharts() {
  try {
    createRiskDistributionChart();
  } catch (error) {
    console.error('Error creating charts:', error);
  }
}

function createRiskDistributionChart() {
  const canvas = document.getElementById('riskChart');
  if (!canvas) {
    console.warn('Risk chart canvas not found');
    return;
  }

  const riskCounts = { high: 0, medium: 0, low: 0 };
  dashboardData.clues.forEach(clue => {
    const riskLevel = clue.ai_analysis?.risk_level || 'medium';
    if (riskCounts.hasOwnProperty(riskLevel)) {
      riskCounts[riskLevel]++;
    } else {
      riskCounts.medium++;
    }
  });

  if (dashboardData.clues.length === 0) {
    riskCounts.high = 2;
    riskCounts.medium = 5;
    riskCounts.low = 3;
  }

  if (window.riskChartInstance) {
    window.riskChartInstance.destroy();
  }

  const ctx = canvas.getContext('2d');
  window.riskChartInstance = new Chart(ctx, {
    type: 'doughnut',
    data: {
      labels: ['üî¥ High Risk', 'üü° Medium Risk', 'üü¢ Low Risk'],
      datasets: [{
        data: [riskCounts.high, riskCounts.medium, riskCounts.low],
        backgroundColor: ['#dc3545', '#ffc107', '#28a745'],
        borderColor: ['#39ff14', '#39ff14', '#39ff14'],
        borderWidth: 2,
        hoverOffset: 4
      }]
    },
    options: {
      responsive: true,
      maintainAspectRatio: false,
      plugins: {
        legend: {
          position: 'bottom',
          labels: { 
            color: '#fff',
            font: { family: 'Orbitron', size: 12 },
            padding: 15
          }
        },
        title: {
          display: true,
          text: 'AI Risk Assessment Distribution',
          color: '#39ff14',
          font: { size: 16, family: 'Orbitron', weight: 'bold' },
          padding: { top: 10, bottom: 20 }
        }
      },
      animation: { animateRotate: true, animateScale: true, duration: 1000 },
      cutout: '50%'
    }
  });
}

function generateFullAIReport() {
  const stats = dashboardData.stats;
  const activeClues = dashboardData.clues.filter(c => c.status !== 'resolved' && !isAdditionalEvidence(c));
  const resolvedClues = dashboardData.clues.filter(c => c.status === 'resolved' && !isAdditionalEvidence(c));
  const highRiskCases = dashboardData.clues.filter(c => c.ai_analysis?.risk_level === 'high').length;
  const mediumRiskCases = dashboardData.clues.filter(c => c.ai_analysis?.risk_level === 'medium').length;
  const lowRiskCases = dashboardData.clues.filter(c => c.ai_analysis?.risk_level === 'low').length;

  const popup = document.createElement('div');
  popup.style.cssText = `
    position: fixed; top: 50%; left: 50%; transform: translate(-50%, -50%);
    background: linear-gradient(135deg, #1a1a1a, #2d2d2d); border: 2px solid #39ff14;
    border-radius: 15px; padding: 30px; z-index: 10000; color: #39ff14;
    text-align: left; font-family: 'Courier New', monospace; max-width: 600px;
    box-shadow: 0 0 30px rgba(57, 255, 20, 0.3);
  `;

  popup.innerHTML = `
    <h3 style="color: #39ff14; text-align: center; margin-bottom: 20px;">ü§ñ SAFE TRACER AI INVESTIGATION REPORT</h3>
    <div style="color: #ffffff; line-height: 1.6;">
      <p><strong>Generated:</strong> ${new Date().toLocaleString()}</p>
      <p><strong>Platform:</strong> Safe Tracer by NIDHIN R</p>
      <hr style="border-color: #39ff14; margin: 20px 0;">

      <h4 style="color: #39ff14;">üìà COMPREHENSIVE STATISTICS:</h4>
      <p>‚Ä¢ Total Investigations: ${stats.totalClues}</p>
      <p>‚Ä¢ Active Investigations: ${activeClues.length}</p>
      <p>‚Ä¢ Resolved Investigations: ${resolvedClues.length}</p>
      <p>‚Ä¢ Anonymous Tips: ${stats.totalTips}</p>
      <p>‚Ä¢ AI Processed Evidence: ${stats.aiProcessed}</p>
      <p>‚Ä¢ High Priority Cases: ${stats.highRisk}</p>
      <p>‚Ä¢ Resolution Rate: ${stats.totalClues > 0 ? Math.round((resolvedClues.length / stats.totalClues) * 100) : 0}%</p>

      <h4 style="color: #39ff14; margin-top: 20px;">üéØ AI RISK ASSESSMENT:</h4>
      <p>‚Ä¢ High Risk Cases: ${highRiskCases}</p>
      <p>‚Ä¢ Medium Risk Cases: ${mediumRiskCases}</p>
      <p>‚Ä¢ Low Risk Cases: ${lowRiskCases}</p>

      <hr style="border-color: #39ff14; margin: 20px 0;">
      <p style="text-align: center; color: #39ff14; font-size: 0.9rem;">AI-Powered Investigation Platform</p>
    </div>
    <div style="text-align: center; margin-top: 20px;">
      <button onclick="this.parentElement.parentElement.remove()" style="background: #39ff14; color: #000; border: none; padding: 10px 20px; border-radius: 5px; font-weight: bold;">Close Report</button>
    </div>
  `;

  document.body.appendChild(popup);
}

function initializeLiveNotifications() {
  if (!supabase) return;

  const channel = supabase.channel('live-admin-updates')
    .on('postgres_changes', {
      event: 'INSERT',
      schema: 'public',
      table: 'tips'
    }, (payload) => {
      createToast('üí° New Anonymous Tip', 'New tip received for investigation', 'tip');
      safeRefreshData();
    })
    .on('postgres_changes', {
      event: 'INSERT',
      schema: 'public',
      table: 'public_reports'
    }, (payload) => {
      createToast('üì¢ New Public Report', 'Citizen submitted new case report for review', 'report');
      loadPublicReports();
    })
    .on('postgres_changes', {
      event: 'UPDATE',
      schema: 'public',
      table: 'public_reports'
    }, (payload) => {
      if (payload.new.status === 'approved') {
        createToast('‚úÖ Report Approved', 'Public report converted to investigation case', 'success');
        safeRefreshData();
      }
    })
    .subscribe();
}

async function testAllSystems() {
  aiSystemsStatus.supabase = !!supabase;
  updateSystemStatus('supabase', aiSystemsStatus.supabase ? 'online' : 'offline');
  aiSystemsStatus.ai = true;
  updateSystemStatus('ai', 'online');
}

function updateSystemStatus(system, status) {
  const statusDot = document.getElementById(`${system}Status`);
  if (statusDot) {
    statusDot.className = `status-dot ${status}`;
  }
}

async function runAICorrelation() {
  const btn = document.getElementById('correlateDataBtn');
  if (!btn) return;
  const originalText = btn.innerHTML;
  btn.innerHTML = 'ü§ñ AI Analyzing...';
  btn.disabled = true;

  const popup = document.createElement('div');
  popup.style.cssText = `
    position: fixed; top: 50%; left: 50%; transform: translate(-50%, -50%);
    background: linear-gradient(135deg, #1a1a1a, #2d2d2d); border: 2px solid #17a2b8;
    border-radius: 15px; padding: 20px; z-index: 10000; color: #17a2b8;
    text-align: center; font-family: 'Orbitron', monospace;
    box-shadow: 0 0 30px rgba(23, 162, 184, 0.3);
  `;
  popup.innerHTML = `
    <div style="font-size: 2rem; margin-bottom: 15px;">üîó</div>
    <h4>AI Correlation Analysis</h4>
    <p>Analyzing case patterns and connections...</p>
    <div class="spinner" style="margin: 20px auto;"></div>
  `;
  document.body.appendChild(popup);

  try {
    let correlations = 0;
    const correlationResults = [];

    for (let i = 0; i < dashboardData.clues.length; i++) {
      for (let j = i + 1; j < dashboardData.clues.length; j++) {
        const similarity = calculateCaseSimilarity(dashboardData.clues[i], dashboardData.clues[j]);
        if (similarity > 0.5) {
          correlations++;
          correlationResults.push({
            case1: dashboardData.clues[i].id,
            case2: dashboardData.clues[j].id,
            similarity: similarity
          });
        }
      }
    }

    await new Promise(resolve => setTimeout(resolve, 3000));

    popup.innerHTML = `
      <div style="font-size: 2rem; margin-bottom: 15px; color: #28a745;">‚úÖ</div>
      <h4 style="color: #28a745;">AI Correlation Complete</h4>
      <p>${correlations} potential correlations detected</p>
      <p>${correlationResults.length} case similarities identified</p>
      <div style="margin-top: 15px;">
        <small>Advanced pattern recognition analysis complete</small>
      </div>
    `;

    createToast('ü§ñ AI Correlation Analysis', `${correlations} correlations detected with ${correlationResults.length} case similarities found`, 'info');
  } catch (error) {
    popup.innerHTML = `
      <div style="font-size: 2rem; margin-bottom: 15px; color: #dc3545;">‚ùå</div>
      <h4 style="color: #dc3545;">Analysis Failed</h4>
      <p>${error.message}</p>
    `;
  } finally {
    btn.innerHTML = originalText;
    btn.disabled = false;
    setTimeout(() => {
      if (document.body.contains(popup)) document.body.removeChild(popup);
    }, 3000);
  }
}

function calculateCaseSimilarity(clue1, clue2) {
  let similarity = 0;

  if (clue1.ai_analysis && clue2.ai_analysis) {
    if (clue1.ai_analysis.risk_level === clue2.ai_analysis.risk_level) similarity += 0.2;

    const keywords1 = clue1.ai_analysis.keywords || [];
    const keywords2 = clue2.ai_analysis.keywords || [];
    const commonKeywords = keywords1.filter(k => keywords2.includes(k));
    if (commonKeywords.length > 0) {
      similarity += (commonKeywords.length / Math.max(keywords1.length, keywords2.length)) * 0.4;
    }
  }

  const desc1 = clue1.description.toLowerCase();
  const desc2 = clue2.description.toLowerCase();
  const words1 = desc1.split(' ').filter(word => word.length > 3);
  const words2 = desc2.split(' ').filter(word => word.length > 3);
  const commonWords = words1.filter(word => words2.includes(word));
  if (commonWords.length > 2) {
    similarity += 0.3;
  }

  return Math.min(similarity, 1.0);
}

async function refreshAIStatus() {
  const btn = document.getElementById('refreshDashboardBtn');
  if (!btn) return;
  const originalText = btn.innerHTML;
  btn.innerHTML = 'üîÑ Refreshing AI Systems...';
  btn.disabled = true;

  try {
    await new Promise(resolve => setTimeout(resolve, 2000));
    await safeRefreshData();
    await loadPublicReports();

    aiSystemsStatus.ai = true;
    updateSystemStatus('ai', 'online');
    aiSystemsStatus.supabase = !!supabase;
    updateSystemStatus('supabase', aiSystemsStatus.supabase ? 'online' : 'offline');

    createToast('‚úÖ AI Status Refreshed', 'AI Systems connectivity verified and data refreshed successfully', 'success');
  } catch (error) {
    alert('‚ùå Error refreshing AI status: ' + error.message);
  } finally {
    btn.innerHTML = originalText;
    btn.disabled = false;
  }
}

async function handleLogout() {
    if (confirm('Logout from investigator dashboard?')) {
        console.log('üö™ User initiated logout');
        createToast('üö™ Logging Out', 'Signing out securely...', 'info');

        try {
            await forceLogout();
            createToast('‚úÖ Logout Complete', 'Signed out successfully', 'success');
        } catch (error) {
            console.error('Logout error:', error);
            createToast('‚ö†Ô∏è Logout Issues', 'Logged out but with errors', 'warning');
            setTimeout(() => location.reload(), 2000);
        }
    }
}


async function forceLogout() {
    try {
        console.log('üö™ Starting force logout process...');

       
        clearAllTimers();
        clearTimeout(inactivityTimer);
        clearInterval(countdownInterval);

        
        currentUser = null;

        
        if (supabase) {
            supabase.removeAllChannels();

            
            try {
                await supabase.auth.signOut();
            } catch (signOutError) {
                console.log('Supabase signout warning:', signOutError);
            }
        }

        
        try {
            localStorage.clear();
            sessionStorage.clear();
        } catch (storageError) {
            console.log('Storage clear warning:', storageError);
        }

        
        console.log('üîÑ Redirecting to login page...');
        window.location.replace('index.html');

    } catch (error) {
        console.error('Force logout error:', error);
        
        window.location.replace('index.html');
    }
}



function getDeviceInfo() {
    const ua = navigator.userAgent;
    let device = 'üñ•Ô∏è Desktop';
    let browser = 'Unknown';
    let os = 'Unknown';

    
    if (/iPhone/i.test(ua)) device = 'üì± iPhone';
    else if (/iPad/i.test(ua)) device = 'üìü iPad';
    else if (/Android.*Mobile/i.test(ua)) device = 'üì± Android Phone';
    else if (/Android/i.test(ua)) device = 'üìü Android Tablet';
    else if (/Windows Phone/i.test(ua)) device = 'üì± Windows Phone';
    else if (/Tablet|PlayBook/i.test(ua)) device = 'üìü Tablet';

    
    if (/Chrome/i.test(ua) && !/Edge/i.test(ua)) browser = 'Chrome';
    else if (/Firefox/i.test(ua)) browser = 'Firefox';
    else if (/Safari/i.test(ua) && !/Chrome/i.test(ua)) browser = 'Safari';
    else if (/Edge/i.test(ua)) browser = 'Edge';
    else if (/Opera/i.test(ua)) browser = 'Opera';

    
    if (/Windows NT/i.test(ua)) os = 'Windows';
    else if (/Mac OS X/i.test(ua)) os = 'macOS';
    else if (/Linux/i.test(ua)) os = 'Linux';
    else if (/Android/i.test(ua)) os = 'Android';
    else if (/iPhone|iPad/i.test(ua)) os = 'iOS';

    return `${device} ‚Ä¢ ${browser} ‚Ä¢ ${os}`;
}

async function getPublicIP() {
    try {
        const response = await fetch('https://api.ipify.org?format=json', { timeout: 3000 });
        const data = await response.json();
        return data.ip;
    } catch {
        try {
            const response = await fetch('https://httpbin.org/ip', { timeout: 3000 });
            const data = await response.json();
            return data.origin.split(',')[0];
        } catch {
            return 'IP Unavailable';
        }
    }
}

async function displayCurrentDeviceInfo() {
    try {
        const deviceInfo = getDeviceInfo();
        const ipAddress = await getPublicIP();
        
        const deviceElement = document.getElementById('currentDevice');
        const ipElement = document.getElementById('currentIP');
        
        if (deviceElement) deviceElement.textContent = deviceInfo;
        if (ipElement) ipElement.textContent = ipAddress;
    } catch (error) {
        console.log('Device info display error:', error);
    }
}


let dashboardNotices = [];

window.createNotice = function() {
    const modal = new bootstrap.Modal(document.getElementById('noticeModal'));
    const modalTitle = document.getElementById('noticeModalTitle');
    const noticeForm = document.getElementById('noticeForm');
    const bannerStyleSection = document.getElementById('bannerStyleSection');
    const bannerImageSection = document.getElementById('bannerImageSection');
    
    modalTitle.textContent = 'üìù Create Notice';
    noticeForm.reset();
    document.getElementById('noticeId').value = '';
    document.getElementById('noticeType').value = 'notice';
    bannerStyleSection.style.display = 'none';
    bannerImageSection.style.display = 'none';
    
    modal.show();
};

window.createBanner = function() {
    const modal = new bootstrap.Modal(document.getElementById('noticeModal'));
    const modalTitle = document.getElementById('noticeModalTitle');
    const noticeForm = document.getElementById('noticeForm');
    const bannerStyleSection = document.getElementById('bannerStyleSection');
    const bannerImageSection = document.getElementById('bannerImageSection');
    
    modalTitle.textContent = 'üéØ Create Banner';
    noticeForm.reset();
    document.getElementById('noticeId').value = '';
    document.getElementById('noticeType').value = 'banner';
    bannerStyleSection.style.display = 'block';
    bannerImageSection.style.display = 'block';
    
    setupBannerImageHandlers();
    modal.show();
};

window.editNotice = function(noticeId) {
    const notice = dashboardNotices.find(n => n.id === noticeId);
    if (!notice) return;
    
    const modal = new bootstrap.Modal(document.getElementById('noticeModal'));
    const modalTitle = document.getElementById('noticeModalTitle');
    const bannerStyleSection = document.getElementById('bannerStyleSection');
    const bannerImageSection = document.getElementById('bannerImageSection');
    const bannerImagePreview = document.getElementById('bannerImagePreview');
    
    modalTitle.textContent = notice.type === 'banner' ? 'üéØ Edit Banner' : 'üìù Edit Notice';
    document.getElementById('noticeId').value = notice.id;
    document.getElementById('noticeType').value = notice.type;
    document.getElementById('noticeTitle').value = notice.title;
    document.getElementById('noticeContent').value = notice.content;
    document.getElementById('noticeActive').checked = notice.active;
    
    if (notice.type === 'banner') {
        bannerStyleSection.style.display = 'block';
        bannerImageSection.style.display = 'block';
        document.getElementById('bannerStyle').value = notice.style || 'info';
        
        
        if (notice.banner_image) {
            bannerImagePreview.innerHTML = `
                <div class="mt-2 text-center">
                    <img src="${notice.banner_image}" alt="Current Banner" 
                         style="max-width: 100%; max-height: 100px; border-radius: 8px; border: 2px solid #39ff14;">
                    <br><small class="text-info mt-1">üñºÔ∏è Current banner image (upload new to replace)</small>
                </div>
            `;
        }
        
        setupBannerImageHandlers();
    } else {
        bannerStyleSection.style.display = 'none';
        bannerImageSection.style.display = 'none';
    }
    
    modal.show();
};

function setupBannerImageHandlers() {
    const bannerImage = document.getElementById('bannerImage');
    const bannerImagePreview = document.getElementById('bannerImagePreview');
    
    if (bannerImage) {
        bannerImage.addEventListener('change', async function(e) {
            const file = e.target.files[0];
            if (file) {
                if (file.size > 5 * 1024 * 1024) {
                    alert('Image too large. Please select a file smaller than 5MB.');
                    e.target.value = '';
                    return;
                }
                
                if (!file.type.startsWith('image/')) {
                    alert('Please select a valid image file.');
                    e.target.value = '';
                    return;
                }
                
                const reader = new FileReader();
                reader.onload = function(e) {
                    bannerImagePreview.innerHTML = `
                        <div class="mt-2 text-center">
                            <img src="${e.target.result}" alt="Banner Preview" 
                                 style="max-width: 100%; max-height: 100px; border-radius: 8px; border: 2px solid #39ff14;">
                            <br><small class="text-success mt-1">üñºÔ∏è Image ready for banner</small>
                        </div>
                    `;
                };
                reader.readAsDataURL(file);
            } else {
                bannerImagePreview.innerHTML = '';
            }
        });
    }
}

window.saveNotice = async function() {
    const id = document.getElementById('noticeId').value;
    const type = document.getElementById('noticeType').value;
    const title = document.getElementById('noticeTitle').value.trim();
    const content = document.getElementById('noticeContent').value.trim();
    const active = document.getElementById('noticeActive').checked;
    const style = type === 'banner' ? document.getElementById('bannerStyle').value : null;
    const bannerImageFile = type === 'banner' ? document.getElementById('bannerImage')?.files?.[0] : null;
    
    if (!title || !content) {
        alert('Please fill in all required fields');
        return;
    }
    
    let bannerImageUrl = null;
    if (bannerImageFile) {
        try {
            bannerImageUrl = await uploadBannerImage(bannerImageFile);
        } catch (error) {
            console.error('Error uploading banner image:', error);
            alert('Error uploading image. Banner will be saved without image.');
        }
    }
    
    const noticeData = {
        type: type,
        title: title,
        content: content,
        active: active,
        style: style,
        banner_image: bannerImageUrl,
        created_by: currentUser?.email || 'Admin',
        updated_at: new Date().toISOString()
    };
    
    if (!id) {
        noticeData.created_at = new Date().toISOString();
    }
    
    try {
        let result;
        if (id) {
            result = await supabase
                .from('notices')
                .update(noticeData)
                .eq('id', id)
                .select();
        } else {
            result = await supabase
                .from('notices')
                .insert(noticeData)
                .select();
        }
        
        if (result.error) throw result.error;
        
        createToast('‚úÖ Notice Saved', `${type === 'banner' ? 'Banner' : 'Notice'} saved successfully`, 'success');
        
        const modal = bootstrap.Modal.getInstance(document.getElementById('noticeModal'));
        modal.hide();
        
        loadNotices();
        
    } catch (error) {
        console.error('Error saving notice:', error);
        alert('Error saving notice: ' + error.message);
    }
};

async function uploadBannerImage(file) {
    try {
        
        return new Promise((resolve, reject) => {
            const reader = new FileReader();
            reader.onload = () => {
                console.log('‚úÖ Banner image converted to base64 successfully');
                resolve(reader.result);
            };
            reader.onerror = () => {
                reject(new Error('Failed to read banner image file'));
            };
            reader.readAsDataURL(file);
        });
    } catch (error) {
        console.error('Banner image upload error:', error);
        throw new Error('Failed to process banner image');
    }
}

window.deleteNotice = async function(noticeId) {
    const notice = dashboardNotices.find(n => n.id === noticeId);
    if (!notice) return;
    
    if (!confirm(`Delete this ${notice.type}?\n\n"${notice.title}"\n\nThis action cannot be undone.`)) {
        return;
    }
    
    try {
        const { error } = await supabase
            .from('notices')
            .delete()
            .eq('id', noticeId);
            
        if (error) throw error;
        
        createToast('üóëÔ∏è Notice Deleted', `${notice.type === 'banner' ? 'Banner' : 'Notice'} deleted successfully`, 'warning');
        loadNotices();
        
    } catch (error) {
        console.error('Error deleting notice:', error);
        alert('Error deleting notice: ' + error.message);
    }
};

window.toggleNoticeStatus = async function(noticeId) {
    const notice = dashboardNotices.find(n => n.id === noticeId);
    if (!notice) return;
    
    try {
        const { error } = await supabase
            .from('notices')
            .update({ 
                active: !notice.active,
                updated_at: new Date().toISOString()
            })
            .eq('id', noticeId);
            
        if (error) throw error;
        
        createToast('üîÑ Status Updated', `${notice.type === 'banner' ? 'Banner' : 'Notice'} ${!notice.active ? 'activated' : 'deactivated'}`, 'info');
        loadNotices();
        
    } catch (error) {
        console.error('Error updating notice status:', error);
        alert('Error updating status: ' + error.message);
    }
};

async function loadNotices() {
    try {
        const { data: notices, error } = await supabase
            .from('notices')
            .select('*')
            .order('created_at', { ascending: false });
            
        if (error) throw error;
        
        dashboardNotices = notices || [];
        updateNoticesTable();
        
    } catch (error) {
        console.error('Error loading notices:', error);
        dashboardNotices = [];
        updateNoticesTable();
    }
}

function updateNoticesTable() {
    const tbody = document.getElementById('noticesTableBody');
    const allNoticesTbody = document.getElementById('allNoticesTableBody');
    
    if (!tbody && !allNoticesTbody) return;
    
    const content = dashboardNotices.length === 0 ? 
        '<tr><td colspan="6" class="text-center">No notices or banners created yet</td></tr>' :
        dashboardNotices.map(notice => {
            const statusBadge = notice.active ? 
                '<span class="badge bg-success">Active</span>' : 
                '<span class="badge bg-secondary">Inactive</span>';
            const typeBadge = notice.type === 'banner' ? 
                `<span class="badge bg-warning text-dark">üéØ Banner (${notice.style || 'info'})</span>` : 
                '<span class="badge bg-info">üìù Notice</span>';
            
            const hasImage = notice.type === 'banner' && notice.banner_image;
            const imageIndicator = hasImage ? ' üñºÔ∏è' : '';
                
            return `
                <tr>
                    <td>${typeBadge}${imageIndicator}</td>
                    <td>
                        <strong>${notice.title}</strong>
                        ${hasImage ? `<br><img src="${notice.banner_image}" alt="Banner" style="max-width: 60px; max-height: 40px; object-fit: cover; border-radius: 4px; margin-top: 4px;">` : ''}
                    </td>
                    <td style="max-width: 300px;">${notice.content.substring(0, 100)}${notice.content.length > 100 ? '...' : ''}</td>
                    <td>${statusBadge}</td>
                    <td>${new Date(notice.created_at).toLocaleDateString()}</td>
                    <td>
                        <div class="btn-group btn-group-sm">
                            <button class="btn btn-outline-info" onclick="editNotice('${notice.id}')" title="Edit">
                                ‚úèÔ∏è
                            </button>
                            <button class="btn btn-outline-${notice.active ? 'warning' : 'success'}" 
                                    onclick="toggleNoticeStatus('${notice.id}')" 
                                    title="${notice.active ? 'Deactivate' : 'Activate'}">
                                ${notice.active ? '‚è∏Ô∏è' : '‚ñ∂Ô∏è'}
                            </button>
                            <button class="btn btn-outline-danger" onclick="deleteNotice('${notice.id}')" title="Delete">
                                üóëÔ∏è
                            </button>
                        </div>
                    </td>
                </tr>
            `;
        }).join('');
    
    if (tbody) tbody.innerHTML = content;
    if (allNoticesTbody) allNoticesTbody.innerHTML = content;
}

document.addEventListener('DOMContentLoaded', function() {
    console.log('üöÄ Safe Tracer by NIDHIN R - Admin Dashboard Initializing...');

    if (window.safeTracerInitialized) {
        console.log('Already initialized, skipping...');
        return;
    }
    window.safeTracerInitialized = true;

    try {
        setupAuthListener();
        setupEventListeners();
        testAllSystems();

        setTimeout(() => {
            checkAuthState();
        }, 500);

        setTimeout(() => {
            try {
                initializeLiveNotifications();
            } catch (error) {
                console.log('Live notifications failed:', error);
            }
        }, 2000);

        setTimeout(() => {
            try {
                displayCurrentDeviceInfo();
                loadNotices();
            } catch (error) {
                console.log('Device info or notices loading failed:', error);
            }
        }, 3000);

        setInterval(() => {
            try {
                if (currentUser && supabase && !isDataLoading && document.visibilityState === 'visible') {
                    console.log('Auto-refreshing dashboard data...');
                    safeRefreshData();
                    loadPublicReports();
                }
            } catch (error) {
                console.log('Auto-refresh failed:', error);
            }
        }, 120000);

    } catch (error) {
        console.error('Dashboard initialization failed:', error);
        setTimeout(() => {
            alert('‚ö†Ô∏è Dashboard initialization failed.\n\nPlease refresh the page to try again.');
        }, 1000);
    }

    console.log('üõ°Ô∏è Safe Tracer Admin Dashboard - Initialization Complete');
});


function setupEventListeners() {
  const loginForm = document.getElementById('loginForm');
  if (loginForm) {
    loginForm.removeEventListener('submit', handleLogin);
    loginForm.addEventListener('submit', handleLogin);
  }

  const buttons = [
    { id: 'uploadClueBtn', handler: openFileUploadModal },
    { id: 'generateAIReportBtn', handler: generateFullAIReport },
    { id: 'correlateDataBtn', handler: runAICorrelation },
    { id: 'refreshDashboardBtn', handler: refreshAIStatus },
    { id: 'generateReportBtn', handler: () => {
      if (activeCaseId) {
        generateConfidentialReportWithWarning(activeCaseId);
      } else {
        alert('Please select a case first by clicking "View Details" on any case');
      }
    }},
    { id: 'refreshStatusBtn', handler: refreshAIStatus },
    { id: 'logoutBtn', handler: handleLogout }
  ];

  buttons.forEach(({ id, handler }) => {
    const element = document.getElementById(id);
    if (element) {
      element.removeEventListener('click', handler);
      element.addEventListener('click', handler);
    }
  });

  console.log('Event listeners set up successfully');
}